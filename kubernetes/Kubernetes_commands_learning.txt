YAML Deployments

deployment yaml should contain below,

apiVersion
kind
metadata
spec


apiVersion:

3 versions
alpha : earliest
Beta : alpha apis once its tested . this will go into kuberenetes main apis
stable :apis doesn't contain alpha and bete goes to stable. only stable versions are allowed in prod sys

Kind :

any resource/orbject of kubernetes such as deployment, pods, jobs, replicaSets, ConfigMaps etc

Metadata :
Set of data that can be added to kubernetes object to uniquely identify it

labels: key-value pairs used to group opbjects to create a deployment using selectors
name: name of the deployment to be created
namespace: name of the namespace where the deployment will be created
annotations: key-value pairs, external sources will be able to find out

UUID, resource version, timestamp like metadata will be added automatically while deployment

metadata:
  name: resource-name
  namespace: deployment-demo
  labels:
    app: web
    platform: java
    release: 18.0
  annotations:
    monitoring: true
    prod: true

Spec : the desired state and cherectoristics of the object to be created

replicas: will make sure the number of pods running is given
spec:
  replicas:3
selector: it defines the lables that match the pods for the deployment to manage
spec:
  selector:
    matchLables:
  app: nginx

templates: it has its own metadata and the spec. spec has all the container information a pod should have. container image info, port, commands, env variables etc

template:
  metadata:
    labels:
  app: nginx
  spec:
    containers:
  - image: nginx
    name: nginx
From: VN, Krishnan (Cognizant)
Sent: Friday, June 14, 2019 12:48 PM
To: VN, Krishnan (Cognizant)
Subject: Kuberenetes commands
 
-Kubernetes-

From Google

Kubernetes automates the distribution and scheduling of application containers across a cluster in a more efficient way.

Continues development, integration and deployment
containerized infrastructure
application-centric management
auto-scalable infrastructure
environment consistency across dev, test and prod envs
loosely coupled infrastructure, where each component act as an separate unit
higher density of resource utilization
predictable infrastructure which is going to be created

It can run application on clusters of physical/virtual and cloud infrastructure. Moving form host-centric to container-centric infrastructure

Architecture---

Client-server architecture
nodes on multiple and master on one linux machines

MASTER COMPONENTS

---etcd
distributed key-value store
key value store to store the distributable configuration information can be used by the nodes, 
sensitive information accessible only through kubernetes API server

---API server

Kubernetes is an API server which provides all the operation on cluster using the API
implements and interface which means different tools and libraries can readily communicate with it
Kubeconfig is the package along with the server side tools that can be used for communication, exposes Kubernetes API

---Controller Manager

responsible for most of the collectors that regulates the status of the cluster and performs a task
daemon runs in the non terminating loop and responsible for sending and collecting information to API server
gets the shared state of the cluster and make changes to bring the current state of the server to the desired state
endpoint controller, replication controller, name-space controller, service account controller etc
runs different kind of controllers to handle nodes, endpoints etc

---scheduler

responsible for distributing the workload
tracking utilization of workload on cluster nodes and then placing workload on which resources are available and ready to accept work
responsible for allocating pods to available nodes
workload utilization and allocating pods to new nodes

NODE COMPONENTS

---Docker 

runs the encapsulated application containers in a relatively isolated and lightweight operating environment

---Kubelet service

small service running on nodes to relay information to and from control plane service
interacts with etcd and gets the configuration and wright values
communicates with master components to receive commands and work
Kubelet process responsible for maintaining state of work and the node server
manages network rules, port forwarding etc


--Kubernetes proxy service

runs on each node making services available to the external host
capable for forwarding the request to correct containers and do the load balancing
manages, pods on nodes, volumes, secrets, creating new containers health checkup etc

KUBERNETES WORKING OVERVIEW
 The commands and queries come through kubectl command.
 The command format will be in JSON format.
 It will reach the API server. This is where the authentication happens. Once it’s completed, based on the commands
it will speak to other components like scheduler, controller, cluster store.
 Then the commands and action items will be hand-over to nodes.
NODES
 They are called kubernetes workers. It will take the instructions from the Master Server.
 It contains Kublet, Container Runtime, and Kube Proxy.
 Kublet is a main kubernetes agent of a node. It can installed it on a Linux host. It registers the node in
the kubernetes cluster and watches the API SERVER for work assignments.
 Once it receives a task, it carries out the task and reports back to the master. It also reports the kublet failures and
overload issues to kubernetes master.
 Control Pane will decide what to do next. Kublet is not responsible for POD failure. It simply reports the status to
the master.
 Kublet exposes the endpoint in the localhost on 10255 port.
 The Spec endpoint provide information about the node. The healthz endpoint will perform health check operation.
PODS endpoint shows the current running PODS.
 Container Engine manages the container management like pulling images, starting and stopping the containers.
 The container runtime will be Docker Mostly. We can also use Core OS rkt (Rocket) on kubernetes. These are
like pluggable.
 Kube Proxy is network brains of a node. It will take care of getting a unique IP address for each POD.
 It like one IP Per POD.
 All the containers inside a POD share a single IP.
 It also took care of Load Balancing across all PODS in a service.

DECLARATIVE MODEL AND DESIRED STATE
 Kubernates operates on a Declarative Model. It means, we provide the manifest files to API server and describe how
we want the cluster to look and feel.
 For example, We tell K8s that use this image and always make 5 copies of that. K8s take care of all the work such as
pulling images, creating containers, assigning network, etc.., To do this, we issue to K8s with the manifest file with
what we want the cluster looks like.
 Once the K8s build the environment as per the manifest file is called Desired State of the cluster.
 Sometimes, when the Actual State of the cluster drifts from the Desired State, kubernetes takes own action to
restore the state.
 Kubernetes will constantly be checking the actual state of the cluster that matches with the Desired State. If these
two don’t match, it will work continuously till it matches.


---SETUP

---IMAGES

apiVersion: v1
kind: pod
metadata:
  name: Testing_for_Image_pull
  spec:
    containers:
  - name: neo4j-server
  image: <Name of the docker image>
  imagePullingPolicy: always
  command: ["echo","SUCCESS"]
  
Testing_for_Image_pull : Name given to teh container that would be created after pulling the image from the registry
neo4j-server : the name given to the container that we are trying to created
image: <Name of the docker image> : image which is trying to pull from registry
imagePullingPolicy: always : pulls the image each time the file is ran
command: display the message on successful execution

kubectl create -f Testing_for_Image_pull
kubectl log Testing_for_Image_pull

---Creating a kubernetes cluster---
minikube start
minikube version
kubectl version
kubectl cluster-info
kubectl get nodes

---Deploying application---
kubectl version :(shows both client (kubectl) and server (kubernetes) versions
kubectl cluster-info :shows the cluster information 
kubectl run kubernetes-bootcamp --image=gcr.io/google-samples/kubernetes-bootcamp:v1 --port=8080 :create a deployment named kubernetes-bootcamp by starting the docker image gcr.io/google-samples/kubernetes-bootcamp on port 8001
kubectl get deployments : lists the status and details of each application and nodes
kubectl proxy : temporarily make a connection between the host and the kubernetes cluster
curl http://localhost:8001/version

kubectl get pods : getting the running pods details
export POD_NAME=$(kubectl get pods -o go-template --template '{{range.items}}{{.metadata.name}}{{"\n"}}{{end}}')
echo $POD_NAME
curl http://localhost:8001/api/v1/namespaces/default/pods/$POD_NAME/proxy : URL to the route to the API of the POD

---Exploring the application---

kubectl describe pods : describe the pod ports, ip adddress, services etc
kubectl logs <podname> : get what even the container on the pod echoes into the logs, no need to specify the container name if only one container is running inside the pod

kubectl exec $POD_NAME env : (no need of container name if only one pod) lists the env variables inside the container
kubectl exec -it $POD_NAME bash : opens a terminal in the container running inside the pod

$cat server.js
$curl http://localhost:8080 : to see the application
$exit

---Expose the application publicly---

kubectl get services
kubectl expose deployments/kubernetes-bootcamp --type="NodePort" --port=8080
kubectl get services
kubectl describe services/kubernetes-bootcamp

export NODE_PORT=$(kubectl get services/kubernetes-bootcamp -o go-template='{{(index .spec.ports 0).nodePort}}')

curl $(minikube ip):$NODE_PORT

kubectl describe deployments
kubectl get pods -l run=kubernetes-bootcamp (-l option for specifying the label)
kubectl label pod <pod_name> app=v1
kubectl describe pods <pod_name>
kubectl get pods -l app=v1

kubectl delete service -l <label>=<value>
kubectl get services
curl $(NODE_IP):<node port>
kubectl exec -it <podname> curl localhost:8080

The DESIRED state is showing the configured number of replicas

The CURRENT state show how many replicas are running now

The UP-TO-DATE is the number of replicas that were updated to match the desired (configured) state

The AVAILABLE state shows how many replicas are actually AVAILABLE to the users

kubectl scale deployments/kubernetes-bootcamp --replicas=4 (scaling up, and the load will be balanced automatically between the replicas)

kubectl get deployments
kubectl get pods -o wide

kubectl describe deployments/kubernetes-bootcamp

kubectl scale deployments/kubernetes-bootcamp --replicas=2 (scaling down)


kubectl set image deployments/kubernetes-bootcamp kubernetes-bootcamp=jocatalin/kubernetes-bootcamp:v2
kubectl rollout status deployments/kubernetes-bootcamp
kubectl rollout undo deployments/kubernetes-bootcamp
