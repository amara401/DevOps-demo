provider "aws" {
region = "us-east-1"
}
resource "aws_instance"
"example" {
ami = "ami-04ca2d0801450d495"
instance_type = "t2.micro"
tags {
  Name = "UI_PATH"
}
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
provider "aws" {
  profile    = "default"
  region     = "us-east-1"
}
 
resource "aws_instance" "example" {
  ami           = "ami-2757f631"
  instance_type = "t2.micro"
}
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
# Provision a web server instance using the latest Ubuntu 16.04 on a
# t2.micro node with an AWS Tag naming it "web-server"
provider "aws" {
    region = "us-east-2"
}
 
# Get the AWS Ubuntu image
data "aws_ami" "ubuntu" {
  most_recent = true
  filter {
    name = "name"
    values = ["ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-*"]
  }
  filter {
    name = "virtualization-type"
    values = ["hvm"]
  }
  owners = ["099720109477"] # Canonical
}
 
# Create security group with web and ssh access
resource "aws_security_group" "web_server" {
  name = "web_server"
 
  ingress {
    protocol    = "tcp"
    from_port   = 22
    to_port     = 22
    cidr_blocks = ["0.0.0.0/0"]
  }
 
  ingress {
    protocol    = "tcp"
    from_port   = 80
    to_port     = 80
    cidr_blocks = ["0.0.0.0/0"]
  }
 
  egress {
    protocol    = -1
    from_port   = 0
    to_port     = 0
    cidr_blocks = ["0.0.0.0/0"]
  }
}
 
# Deploy ssh key for instance access
resource "aws_key_pair" "deployer" {
  key_name = "web_server"
  public_key = "${file("~/.ssh/id_rsa.pub")}"
}
 
# Create web server
resource "aws_instance" "web_server" {
    ami = "${data.aws_ami.ubuntu.id}"
    vpc_security_group_ids = ["${aws_security_group.web_server.id}"]
    instance_type = "t2.micro"
    key_name      = "web_server"
    tags {
        Name = "web-server"
    }
 
  connection {
    user         = "ubuntu"
    private_key  = "${file("~/.ssh/id_rsa")}"
  }
 
  provisioner "remote-exec" {
    inline = [
      "sudo apt-get update",
      "sudo apt-get install apache2 -y",
      "sudo systemctl enable apache2",
      "sudo systemctl start apache2",
      "sudo chmod 777 /var/www/html/index.html"
    ]
  }
 
  provisioner "file" {
    source = "index.html"
    destination = "/var/www/html/index.html"
  }
 
  provisioner "remote-exec" {
    inline = [
      "sudo chmod 644 /var/www/html/index.html"
    ]
  }
 
 # Save the public IP for testing
  provisioner "local-exec" {
    command = "echo ${aws_instance.web_server.public_ip} > public-ip.txt"
  }
 
}
 
output "public_ip" {
  value = "${aws_instance.web_server.public_ip}"
}
 
 
provider "aws" {
  access_key = "ACCESS_KEY_HERE"
  secret_key = "SECRET_KEY_HERE"
  region = "us-east-2"
}
 
 
# Create security group with web and ssh access
resource "aws_security_group" "UI_Deploy" {
  name = "web_server"
 
  ingress {
    protocol    = "tcp"
    from_port   = 22
    to_port     = 22
    cidr_blocks = ["0.0.0.0/0"]
  }
 
  ingress {
    protocol    = "tcp"
    from_port   = 80
    to_port     = 80
    cidr_blocks = ["0.0.0.0/0"]
  }
}
 
# Deploy ssh key for instance access
resource "aws_key_pair" "deployer" {
  key_name = "web_server"
  public_key = "${file("~/.ssh/id_rsa.pub")}"
}
 
 
# Get the AWS Microsoft Windows Server 2019 Base image
resource "aws_instance" "UI_Deploy" {
ami = "ami-04ca2d0801450d495"
instance_type = "t2.micro"
vpc_security_group_ids = ["${aws_security_group.UI_Deploy.id}"]
key_name      = "UI_Deploy"
tags {
  Name = "UI_PATH"
}
 connection {
    user         = "Administrator"
    private_key  = "${file("~/.ssh/id_rsa")}"
  }
 
  provisioner "remote-exec" {
    inline = [
      "Dism /Online /Enable-Feature /FeatureName:NetFx4 /All /LimitAccess /Source:X:\sources\sxs",
      "Dism /Online /Enable-Feature /FeatureName:MicrosoftWindowsPowerShell /All",
      "(new-object System.Net.WebClient).DownloadFile('http://dl.google.com/chrome/install/375.126/chrome_installer.exe', 'c:\temp\chrome.exe');. c:\temp\chrome.exe /silent /install;rm c:\temp -rec",
      "(Get-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Internet Explorer').Version",
    ]
  }
 
}
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
$LocalTempDir = $env:TEMP; $ChromeInstaller = "ChromeInstaller.exe"; (new-object    System.Net.WebClient).DownloadFile('http://dl.google.com/chrome/install/375.126/chrome_installer.exe', "$LocalTempDir\$ChromeInstaller"); & "$LocalTempDir\$ChromeInstaller" /silent /install; $Process2Monitor =  "ChromeInstaller"; Do { $ProcessesFound = Get-Process | ?{$Process2Monitor -contains $_.Name} | Select-Object -ExpandProperty Name; If ($ProcessesFound) { "Still running: $($ProcessesFound -join ', ')" | Write-Host; Start-Sleep -Seconds 2 } else { rm "$LocalTempDir\$ChromeInstaller" -ErrorAction SilentlyContinue -Verbose } } Until (!$ProcessesFound)
 
(new-object System.Net.WebClient).DownloadFile('http://dl.google.com/chrome/install/375.126/chrome_installer.exe', 'c:\temp\chrome.exe');. c:\temp\chrome.exe /silent /install;rm c:\temp -rec
 
Get-WindowsOptionalFeature -Online -FeatureName Internet*
 
(Get-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Internet Explorer').Version
 
Command to install .Net Framework 4.0
Dism /Online /Enable-Feature /FeatureName:NetFx4 /All
OR
Dism /Online /Enable-Feature /FeatureName:NetFx4 /All /LimitAccess /Source:X:\sources\sxs
 
Command to install PowerShell
Dism /Online /Enable-Feature /FeatureName:MicrosoftWindowsPowerShell /All
 
 
 
How to run the terraform scripts:
1.       Now we will run the “terraform init” command where we created our instance.tf file to download and initialize the appropriate provider plugins. 
$ terraform init
2.       Once this is complete, let's run the “terraform plan” command. This will let us see what Terraform will do before we decide to apply it.
3.       Now to create the instance, we run the “terraform apply” command.
$ terraform apply -auto-approve
4.  We can check the state from file:
$ ls –la
$ cat terraform.tfstate
5.       You can inspect the current state using “terraform show”
6.  Destroy the Instance
a.  Check the Plan for Destruction
           $ terraform plan -destroy
b.  Apply the Plan with “Destroy” Option
$ terraform destroy
 
 

 
 
 