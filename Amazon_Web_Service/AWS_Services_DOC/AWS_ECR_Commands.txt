touch Dockerfile

###---Dockerfile---###
FROM ubuntu:18.04

# Install dependencies
RUN apt-get update && \
 apt-get -y install apache2

# Install apache and write hello world message
RUN echo 'Hello World!' > /var/www/html/index.html

# Configure apache
RUN echo '. /etc/apache2/envvars' > /root/run_apache.sh && \
 echo 'mkdir -p /var/run/apache2' >> /root/run_apache.sh && \
 echo 'mkdir -p /var/lock/apache2' >> /root/run_apache.sh && \ 
 echo '/usr/sbin/apache2 -D FOREGROUND' >> /root/run_apache.sh && \ 
 chmod 755 /root/run_apache.sh

EXPOSE 80

CMD /root/run_apache.sh
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

docker build -t hello-world .	---> To build an Image
docker images --filter reference=hello-world	---> Filter the images with "hello-world"
docker run -t -i -p 80:80 hello-world	---> Create a COntainer from "hello-world" image

#Create an Amazon ECR repository to store your hello-world image
	$ aws ecr create-repository --repository-name hello-repository --region region

#Tag the hello-world image with the repositoryUri
docker tag hello-world aws_account_id.dkr.ecr.region.amazonaws.com/hello-repository	

#Run this to get the docker login authentication command string for your registry.
aws ecr get-login --no-include-email --region region
(or)
$(aws ecr get-login --registry-ids 123456789012 --no-include-email)

#Push the image to Amazon ECR with the repositoryUri value 
docker push aws_account_id.dkr.ecr.region.amazonaws.com/hello-repository

#Pull an Image from Amazon ECR
docker pull aws_account_id.dkr.ecr.region.amazonaws.com/hello-repository

#List the images in your repository so that you can identify them by image tag or digest.
$ aws ecr list-images --repository-name hello-repository


#Delete an Image
aws ecr batch-delete-image --repository-name hello-repository --image-ids imageTag=hello-world

#delete the repository
aws ecr delete-repository --repository-name hello-repository --region region --force

###---Retagging an Image---###
1.	Use the batch-get-image command to get the image manifest for the image to retag and write it to an environment variable.
MANIFEST=$(aws ecr batch-get-image --repository-name amazonlinux --image-ids imageTag=latest --query 'images[].imageManifest' --output text)

2.	Use the --image-tag option of the put-image command to put the image manifest to Amazon ECR with a new tag.
aws ecr put-image --repository-name amazonlinux --image-tag 2017.03 --image-manifest "$MANIFEST"

3.	Verify that your new image tag is attached to your image. 
aws ecr describe-images --repository-name amazonlinux


###---Image Tag Mutability---###
1.	To create a repository with immutable tags configured
$ aws ecr create-repository --repository-name name --image-tag-mutability IMMUTABLE --region us-east-2

2.	To update the image tag mutability settings for an existing repository
$ aws ecr put-image-tag-mutability --repository-name name --image-tag-mutability IMMUTABLE --region us-east-2


###---Image Scanning---###
1.	When a new repository is configured to scan on push, all new images pushed to the repository will be scanned.
$ aws ecr create-repository --repository-name name --image-scanning-configuration scanOnPush=true --region us-east-2

2.	Your existing repositories can be configured to scan images when you push them to a repository. This setting will apply to future image pushes.
$ aws ecr put-image-scanning-configuration --repository-name name --image-scanning-configuration scanOnPush=true --region us-east-2

3.	You can start image scans manually when you want to scan images in repositories that are not configured to scan on push. An image can only be scanned once per day.
$ aws ecr start-image-scan --repository-name name --image-id imageTag=tag_name --region us-east-2
(or)
$ aws ecr start-image-scan --repository-name name --image-id imageDigest=sha256_hash --region us-east-2

4.	Retrieving Scan Findings: You can retrieve the scan findings for the last completed image scan. The findings list by severity the software vulnerabilities that were discovered, based on the Common Vulnerabilities and Exposures (CVEs) database.
$ aws ecr describe-image-scan-findings --repository-name name --image-id imageTag=tag_name --region us-east-2



###---Policies---###
#This particular policy will start cleaning up once have more than 800 images on the same repository
$ aws ecr put-lifecycle-policy --registry-id 123456789012 --repository-name randserver --lifecycle-policy-text '{"rules":[{"rulePriority":10,"description":"Expire old images","selection":{"tagStatus":"any","countType":"imageCountMoreThan","countNumber":800},"action":{"type":"expire"}}]}'

#Policies can be attached to an IAM user as follows
$ aws iam attach-user-policy --policy-arn arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly  --user-name amar

#we will create an IAM group for the developers of our randserver application:
$ aws iam create-group --group-name randserver-developers
    {
          "Group": {
          "Path": "/",
          "GroupName": "randserver-developers",
          "GroupId": "AGPAJRDMVLGOJF3ARET5K",
          "Arn": "arn:aws:iam::123456789012:group/randserver-developers",
          "CreateDate": "2018-10-25T11:45:42Z"
          }
    }

#Then we’ll add the amar user to the group:
$aws iam add-user-to-group --group-name randserver-developers --user-name amar

#Now we’ll need to create our policy so that we can attach it to the group. Copy this JSON document to a file:
{ 
   "Version": "2012-10-17", 
   "Statement": [{ 
         "Effect": "Allow", 
         "Action": [ 
               "ecr:GetAuthorizationToken", 
               "ecr:BatchCheckLayerAvailability", 
               "ecr:GetDownloadUrlForLayer", 
               "ecr:GetRepositoryPolicy", 
               "ecr:DescribeRepositories", 
               "ecr:ListImages", 
               "ecr:DescribeImages", 
               "ecr:BatchGetImage", 
               "ecr:InitiateLayerUpload", 
               "ecr:UploadLayerPart", 
               "ecr:CompleteLayerUpload", 
               "ecr:PutImage"
          ], 
         "Resource": "arn:aws:ecr:eu-central-1:123456789012:repository/randserver" 
   }] 
}

#To create the policy, execute the following, passing the appropriate path for the JSON document file:
$aws iam create-policy --policy-name EcrPushPullRandserverDevelopers --policy-document file://./policy.json
    
    {
          "Policy": {
          "PolicyName": "EcrPushPullRandserverDevelopers",
          "PolicyId": "ANPAITNBFTFWZMI4WFOY6",
          "Arn": "arn:aws:iam::123456789012:policy/EcrPushPullRandserverDevelopers",
          "Path": "/",
          "DefaultVersionId": "v1",
          "AttachmentCount": 0,
          "PermissionsBoundaryUsageCount": 0,
          "IsAttachable": true,
          "CreateDate": "2018-10-25T12:00:15Z",
          "UpdateDate": "2018-10-25T12:00:15Z"
          }
    }

#The final step is then to attach the policy to the group, so that amar and all future developers of this application can use the repository from their workstation:
$aws iam attach-group-policy --group-name randserver-developers --policy-arn arn:aws:iam::123456789012:policy/EcrPushPullRandserverDevelopers
