$ kubectl config get-contexts

CURRENT   NAME       CLUSTER    AUTHINFO   NAMESPACE

*         minikube   minikube   minikube

$

$ kubectl config get-contexts minikube

CURRENT   NAME       CLUSTER    AUTHINFO   NAMESPACE

*         minikube   minikube   minikube

$

$ kubectl config get-clusters

NAME

minikube

$

$ kubectl config get-clustersminikube

error: unknown command "get-clustersminikube"

See 'kubectl config -h' for help and examples.

$ kubectl config get-clusters minikube

NAME

minikube

$

$ kubectl config use-contexts

error: unknown command "use-contexts"

See 'kubectl config -h' for help and examples.

$ kubectl config use-context

Sets the current-context in a kubeconfig file

 

Aliases:

use-context, use

 

Examples:

  # Use the context for the minikube cluster

  kubectl config use-context minikube

 

Usage:

  kubectl config use-context CONTEXT_NAME [options]

 

Use "kubectl options" for a list of global command-line options (applies to all commands).

error: Unexpected args: []

$

$ kubectl config use-context minikube

Switched to context "minikube".

$ kubectl config set-context prod –user = vipin-mishra

Sets a context entry in kubeconfig

 

Specifying a name that already exists will merge new fields on top of existing values for those

fields.

 

Examples:

  # Set the user field on the gce context entry without touching other values

  kubectl config set-context gce --user=cluster-admin

 

Usage:

  kubectl config set-context NAME [--cluster=cluster_nickname] [--user=user_nickname]

[--namespace=namespace] [options]

 

Use "kubectl options" for a list of global command-line options (applies to all commands).

error: Unexpected args: [prod –user = vipin-mishra]

$ kubectl config set-context produtil --user=mishra

Context "produtil" created.

$

$ kubectl config get-context

error: unknown command "get-context"

See 'kubectl config -h' for help and examples.

$ kubectl config get-contexts

CURRENT   NAME       CLUSTER    AUTHINFO   NAMESPACE

*         minikube   minikube   minikube

          produtil              mishra

$ kubectl config set-cluster produtil

Cluster "produtil" set.

$

$

$ kubectl config get-contexts

CURRENT   NAME       CLUSTER    AUTHINFO   NAMESPACE

*         minikube   minikube   minikube

          produtil              mishra

$ kubectl config get-clusters

NAME

produtil

minikube

$

$ kubectl config view

apiVersion: v1

clusters:

- cluster:

    certificate-authority: /root/.minikube/ca.crt

    server: https://172.17.0.7:8443

  name: minikube

- cluster:

    server: ""

  name: produtil

contexts:

- context:

    cluster: minikube

    user: minikube

  name: minikube

- context:

    cluster: ""

    user: mishra

  name: produtil

current-context: minikube

kind: Config

preferences: {}

users:

- name: minikube

  user:

    client-certificate: /root/.minikube/client.crt

    client-key: /root/.minikube/client.key

$

$

$ kubectl config set-cluster produtil --server=https://localhost:8080

Cluster "produtil" set.

$

$ kubectl config get-clusters

NAME

minikube

produtil

$

$

$ kubectl config view

apiVersion: v1

clusters:

- cluster:

    certificate-authority: /root/.minikube/ca.crt

    server: https://172.17.0.7:8443

  name: minikube

- cluster:

    server: https://localhost:8080

  name: produtil

contexts:

- context:

    cluster: minikube

    user: minikube

  name: minikube

- context:

    cluster: ""

    user: mishra

  name: produtil

current-context: minikube

kind: Config

preferences: {}

users:

- name: minikube

  user:

    client-certificate: /root/.minikube/client.crt

    client-key: /root/.minikube/client.key

$

$

$ kubectl config set-context produtil --user=mishra --cluster=produtil

Context "produtil" modified.

$

$ kubectl config get-contexts

CURRENT   NAME       CLUSTER    AUTHINFO   NAMESPACE

*         minikube   minikube   minikube

          produtil   produtil   mishra

$

$

$

$ kubectl config view

apiVersion: v1

clusters:

- cluster:

    certificate-authority: /root/.minikube/ca.crt

    server: https://172.17.0.7:8443

  name: minikube

- cluster:

    server: https://localhost:8080

  name: produtil

contexts:

- context:

    cluster: minikube

    user: minikube

  name: minikube

- context:

    cluster: produtil

    user: mishra

  name: produtil

current-context: minikube

kind: Config

preferences: {}

users:

- name: minikube

  user:

    client-certificate: /root/.minikube/client.crt

    client-key: /root/.minikube/client.key

$ ^C

$ ^C

$

$ kubectl config get-contexts

CURRENT   NAME       CLUSTER    AUTHINFO   NAMESPACE

*         minikube   minikube   minikube

          produtil   produtil   mishra

$

$ kubectl config get-clusters

NAME

minikube

produtil

$

$

$

$ kubectl config set-credentials produtil --usenamer=mishra --password=testpassword

Error: unknown flag: --usenamer

 

 

Examples:

  # Set only the "client-key" field on the "cluster-admin"

  # entry, without touching other values:

  kubectl config set-credentials cluster-admin --client-key=~/.kube/admin.key

 

  # Set basic auth for the "cluster-admin" entry

  kubectl config set-credentials cluster-admin --username=admin --password=uXFGweU9l35qcif

 

  # Embed client certificate data in the "cluster-admin" entry

  kubectl config set-credentials cluster-admin --client-certificate=~/.kube/admin.crt --embed-certs=true

 

  # Enable the Google Compute Platform auth provider for the "cluster-admin" entry

  kubectl config set-credentials cluster-admin --auth-provider=gcp

 

  # Enable the OpenID Connect auth provider for the "cluster-admin" entry with additional args

  kubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-id=foo --auth-provider-arg=client-secret=bar

 

  # Remove the "client-secret" config value for the OpenID Connect auth provider for the "cluster-admin" entry

  kubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-secret-

 

Options:

      --auth-provider='': Auth provider for the user entry in kubeconfig

      --auth-provider-arg=[]: 'key=value' arguments for the auth provider

      --embed-certs=false: Embed client cert/key for the user entry in kubeconfig

      --password='': password for the user entry in kubeconfig

      --username='': username for the user entry in kubeconfig

 

Usage:

  kubectl config set-credentials NAME [--client-certificate=path/to/certfile] [--client-key=path/to/keyfile] [--token=bearer_token] [--username=basic_user] [--password=basic_password] [--auth-provider=provider_name][--auth-provider-arg=key=value] [options]

 

Use "kubectl options" for a list of global command-line options (applies to all commands).

 

unknown flag: --usenamer

$ kubectl config set-credentials produtil --usename=mishra --password=testpassword

Error: unknown flag: --usename

 

 

Examples:

  # Set only the "client-key" field on the "cluster-admin"

  # entry, without touching other values:

  kubectl config set-credentials cluster-admin --client-key=~/.kube/admin.key

 

  # Set basic auth for the "cluster-admin" entry

  kubectl config set-credentials cluster-admin --username=admin --password=uXFGweU9l35qcif

 

  # Embed client certificate data in the "cluster-admin" entry

  kubectl config set-credentials cluster-admin --client-certificate=~/.kube/admin.crt --embed-certs=true

 

  # Enable the Google Compute Platform auth provider for the "cluster-admin" entry

  kubectl config set-credentials cluster-admin --auth-provider=gcp

 

  # Enable the OpenID Connect auth provider for the "cluster-admin" entry with additional args

  kubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-id=foo --auth-provider-arg=client-secret=bar

 

  # Remove the "client-secret" config value for the OpenID Connect auth provider for the "cluster-admin" entry

  kubectl config set-credentials cluster-admin --auth-provider=oidc --auth-provider-arg=client-secret-

 

Options:

      --auth-provider='': Auth provider for the user entry in kubeconfig

      --auth-provider-arg=[]: 'key=value' arguments for the auth provider

      --embed-certs=false: Embed client cert/key for the user entry in kubeconfig

      --password='': password for the user entry in kubeconfig

      --username='': username for the user entry in kubeconfig

 

Usage:

  kubectl config set-credentials NAME [--client-certificate=path/to/certfile] [--client-key=path/to/keyfile] [--token=bearer_token] [--username=basic_user] [--password=basic_password] [--auth-provider=provider_name][--auth-provider-arg=key=value] [options]

 

Use "kubectl options" for a list of global command-line options (applies to all commands).

 

unknown flag: --usename

$

$ kubectl config set-credentials produtil --username=mishra --password=testpassword

User "produtil" set.

$

$

$ kubectl config view

apiVersion: v1

clusters:

- cluster:

    certificate-authority: /root/.minikube/ca.crt

    server: https://172.17.0.7:8443

  name: minikube

- cluster:

    server: https://localhost:8080

  name: produtil

contexts:

- context:

    cluster: minikube

    user: minikube

  name: minikube

- context:

    cluster: produtil

    user: mishra

  name: produtil

current-context: minikube

kind: Config

preferences: {}

users:

- name: minikube

  user:

    client-certificate: /root/.minikube/client.crt

    client-key: /root/.minikube/client.key

- name: produtil

  user:

    password: testpassword

    username: mishra

$

$

$

$

$ kubectl config unset user.mishra

error: unable to parse user.mishra after [] at api.Config

$ kubectl config unset users.mishra

Property "users.mishra" unset.

$

$

$ kubectl config view

apiVersion: v1

clusters:

- cluster:

    certificate-authority: /root/.minikube/ca.crt

    server: https://172.17.0.7:8443

  name: minikube

- cluster:

    server: https://localhost:8080

  name: produtil

contexts:

- context:

    cluster: minikube

    user: minikube

  name: minikube

- context:

    cluster: produtil

    user: mishra

  name: produtil

current-context: minikube

kind: Config

preferences: {}

users:

- name: minikube

  user:

    client-certificate: /root/.minikube/client.crt

    client-key: /root/.minikube/client.key

- name: produtil

  user:

    password: testpassword

    username: mishra

$

$

$ kubectl config get-contexts

CURRENT   NAME       CLUSTER    AUTHINFO   NAMESPACE

*         minikube   minikube   minikube

          produtil   produtil   mishra

$

$

$ kubectl config get-clusters

NAME

minikube

produtil

$

$

$

$

$ kubectl config unset users.produtil

Property "users.produtil" unset.

$

$

$ kubectl config get-clusters

NAME

minikube

produtil

$ kubectl config get-contexts

CURRENT   NAME       CLUSTER    AUTHINFO   NAMESPACE

*         minikube   minikube   minikube

          produtil   produtil   mishra

$

$

$ kubectl config view

apiVersion: v1

clusters:

- cluster:

    certificate-authority: /root/.minikube/ca.crt

    server: https://172.17.0.7:8443

  name: minikube

- cluster:

    server: https://localhost:8080

  name: produtil

contexts:

- context:

    cluster: minikube

    user: minikube

  name: minikube

- context:

    cluster: produtil

    user: mishra

  name: produtil

current-context: minikube

kind: Config

preferences: {}

users:

- name: minikube

  user:

    client-certificate: /root/.minikube/client.crt

    client-key: /root/.minikube/client.key

$

$

$

$

$ kubectl version

Client Version: version.Info{Major:"1", Minor:"11", GitVersion:"v1.11.0", GitCommit:"91e7b4fd31fcd3d5f436da26c980becec37ceefe", GitTreeState:"clean", BuildDate:"2018-06-27T20:17:28Z", GoVersion:"go1.10.2", Compiler:"gc", Platform:"linux/amd64"}

Server Version: version.Info{Major:"1", Minor:"10", GitVersion:"v1.10.0", GitCommit:"fc32d2f3698e36b93322a3465f63a14e9f0eaead", GitTreeState:"clean", BuildDate:"2018-04-10T12:46:31Z", GoVersion:"go1.9.4", Compiler:"gc", Platform:"linux/amd64"}

$ kubectl get nodes

NAME       STATUS     ROLES     AGE       VERSION

minikube   NotReady   <none>    5s        v1.10.0

$ kubectl run kubernetes-bootcamp --image=gcr.io/google-samples/kubernetes-bootcamp:v1 --port=8080

deployment.apps/kubernetes-bootcamp created

$ kubectl get deployments

NAME                  DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE

kubernetes-bootcamp   1         1         1            1           8s

$ kubectl create deployment nginx --image=nginx

deployment.apps/nginx created

$

$

$ kubectl get deployments

NAME                  DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE

kubernetes-bootcamp   1         1         1            1           48s

nginx                 1         1         1            0           9s

$

$

$ kubectl apply -f https://git.io/vPieo

pod/busybox0 created

$

$

$ kubectl get deployments

NAME                  DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE

kubernetes-bootcamp   1         1         1            1           1m

nginx                 1         1         1            1           35s

$

$

$ kubectl get pods

NAME                                   READY     STATUS    RESTARTS   AGE

busybox0                               1/1       Running   0          21s

kubernetes-bootcamp-5c69669756-pvd4b   1/1       Running   0          1m

nginx-56f766d96f-pqjx6                 1/1       Running   0          46s

$

$ kubectl get pods -o yaml

apiVersion: v1

items:

- apiVersion: v1

  kind: Pod

  metadata:

    annotations:

      kubectl.kubernetes.io/last-applied-configuration: |

        {"apiVersion":"v1","kind":"Pod","metadata":{"annotations":{},"labels":{"app":"busybox0"},"name":"busybox0","namespace":"default"},"spec":{"containers":[{"command":["sleep","3600"],"image":"busybox","imagePullPolicy":"IfNotPresent","name":"busybox"}],"restartPolicy":"Always"}}

    creationTimestamp: 2019-06-13T13:13:52Z

    labels:

      app: busybox0

    name: busybox0

    namespace: default

    resourceVersion: "266"

    selfLink: /api/v1/namespaces/default/pods/busybox0

    uid: 16be35a2-8ddd-11e9-a542-0242ac110013

  spec:

    containers:

    - command:

      - sleep

      - "3600"

      image: busybox

      imagePullPolicy: IfNotPresent

      name: busybox

      resources: {}

      terminationMessagePath: /dev/termination-log

      terminationMessagePolicy: File

      volumeMounts:

      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount

        name: default-token-5srwb

        readOnly: true

    dnsPolicy: ClusterFirst

    nodeName: minikube

    restartPolicy: Always

    schedulerName: default-scheduler

    securityContext: {}

    serviceAccount: default

    serviceAccountName: default

    terminationGracePeriodSeconds: 30

    tolerations:

    - effect: NoExecute

      key: node.kubernetes.io/not-ready

      operator: Exists

      tolerationSeconds: 300

    - effect: NoExecute

      key: node.kubernetes.io/unreachable

      operator: Exists

      tolerationSeconds: 300

    volumes:

    - name: default-token-5srwb

      secret:

        defaultMode: 420

        secretName: default-token-5srwb

  status:

    conditions:

    - lastProbeTime: null

      lastTransitionTime: 2019-06-13T13:13:52Z

      status: "True"

      type: Initialized

    - lastProbeTime: null

      lastTransitionTime: 2019-06-13T13:13:56Z

      status: "True"

      type: Ready

    - lastProbeTime: null

      lastTransitionTime: 2019-06-13T13:13:52Z

      status: "True"

      type: PodScheduled

    containerStatuses:

    - containerID: docker://3bb94516112f997d73b3f83f27f6b2086e0069eb3fe15347293ef503f1fba12b

      image: busybox:latest

      imageID: docker-pullable://busybox@sha256:c888d69b73b5b444c2b0bd70da28c3da102b0aeb327f3a297626e2558def327f

      lastState: {}

      name: busybox

      ready: true

      restartCount: 0

      state:

        running:

          startedAt: 2019-06-13T13:13:55Z

    hostIP: 172.17.0.19

    phase: Running

    podIP: 172.18.0.6

    qosClass: BestEffort

    startTime: 2019-06-13T13:13:52Z

- apiVersion: v1

 kind: Pod

  metadata:

    creationTimestamp: 2019-06-13T13:12:48Z

    generateName: kubernetes-bootcamp-5c69669756-

    labels:

      pod-template-hash: "1725225312"

      run: kubernetes-bootcamp

    name: kubernetes-bootcamp-5c69669756-pvd4b

    namespace: default

    ownerReferences:

    - apiVersion: extensions/v1beta1

      blockOwnerDeletion: true

      controller: true

      kind: ReplicaSet

      name: kubernetes-bootcamp-5c69669756

      uid: f0fcd96a-8ddc-11e9-a542-0242ac110013

    resourceVersion: "189"

    selfLink: /api/v1/namespaces/default/pods/kubernetes-bootcamp-5c69669756-pvd4b

    uid: f0fef7bc-8ddc-11e9-a542-0242ac110013

  spec:

    containers:

    - image: gcr.io/google-samples/kubernetes-bootcamp:v1

      imagePullPolicy: IfNotPresent

      name: kubernetes-bootcamp

      ports:

      - containerPort: 8080

        protocol: TCP

      resources: {}

      terminationMessagePath: /dev/termination-log

      terminationMessagePolicy: File

      volumeMounts:

      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount

        name: default-token-5srwb

        readOnly: true

    dnsPolicy: ClusterFirst

    nodeName: minikube

    restartPolicy: Always

    schedulerName: default-scheduler

    securityContext: {}

    serviceAccount: default

   serviceAccountName: default

    terminationGracePeriodSeconds: 30

    tolerations:

    - effect: NoExecute

      key: node.kubernetes.io/not-ready

      operator: Exists

      tolerationSeconds: 300

    - effect: NoExecute

      key: node.kubernetes.io/unreachable

      operator: Exists

      tolerationSeconds: 300

    volumes:

    - name: default-token-5srwb

      secret:

        defaultMode: 420

        secretName: default-token-5srwb

  status:

    conditions:

    - lastProbeTime: null

      lastTransitionTime: 2019-06-13T13:12:48Z

      status: "True"

      type: Initialized

    - lastProbeTime: null

      lastTransitionTime: 2019-06-13T13:12:49Z

      status: "True"

      type: Ready

    - lastProbeTime: null

      lastTransitionTime: 2019-06-13T13:12:48Z

      status: "True"

      type: PodScheduled

    containerStatuses:

    - containerID: docker://6b83a203dc7b8321de5a75e47a9e0d78968db9ba226df93fbb942a89eaa8be41

      image: gcr.io/google-samples/kubernetes-bootcamp:v1

     imageID: docker-pullable://gcr.io/google-samples/kubernetes-bootcamp@sha256:0d6b8ee63bb57c5f5b6156f446b3bc3b3c143d233037f3a2f00e279c8fcc64af

      lastState: {}

      name: kubernetes-bootcamp

      ready: true

      restartCount: 0

      state:

        running:

          startedAt: 2019-06-13T13:12:49Z

    hostIP: 172.17.0.19

    phase: Running

    podIP: 172.18.0.4

    qosClass: BestEffort

    startTime: 2019-06-13T13:12:48Z

- apiVersion: v1

  kind: Pod

  metadata:

    creationTimestamp: 2019-06-13T13:13:27Z

    generateName: nginx-56f766d96f-

    labels:

      app: nginx

      pod-template-hash: "1293228529"

    name: nginx-56f766d96f-pqjx6

    namespace: default

    ownerReferences:

    - apiVersion: extensions/v1beta1

      blockOwnerDeletion: true

      controller: true

      kind: ReplicaSet

      name: nginx-56f766d96f

      uid: 083bad0a-8ddd-11e9-a542-0242ac110013

    resourceVersion: "243"

    selfLink: /api/v1/namespaces/default/pods/nginx-56f766d96f-pqjx6

    uid: 083f5c95-8ddd-11e9-a542-0242ac110013

  spec:

    containers:

    - image: nginx

      imagePullPolicy: Always

      name: nginx

      resources: {}

      terminationMessagePath: /dev/termination-log

      terminationMessagePolicy: File

      volumeMounts:

      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount

        name: default-token-5srwb

        readOnly: true

    dnsPolicy: ClusterFirst

    nodeName: minikube

    restartPolicy: Always

    schedulerName: default-scheduler

    securityContext: {}

    serviceAccount: default

    serviceAccountName: default

    terminationGracePeriodSeconds: 30

    tolerations:

    - effect: NoExecute

      key: node.kubernetes.io/not-ready

      operator: Exists

      tolerationSeconds: 300

    - effect: NoExecute

      key: node.kubernetes.io/unreachable

      operator: Exists

      tolerationSeconds: 300

    volumes:

    - name: default-token-5srwb

      secret:

        defaultMode: 420

        secretName: default-token-5srwb

  status:

    conditions:

    - lastProbeTime: null

      lastTransitionTime: 2019-06-13T13:13:27Z

      status: "True"

      type: Initialized

    - lastProbeTime: null

      lastTransitionTime: 2019-06-13T13:13:37Z

      status: "True"

      type: Ready

    - lastProbeTime: null

      lastTransitionTime: 2019-06-13T13:13:27Z

      status: "True"

      type: PodScheduled

    containerStatuses:

    - containerID: docker://738ffe4f7fc290588e629fb65127295bbd4cd599877d437e3d361c366e6a3129

      image: nginx:latest

      imageID: docker-pullable://nginx@sha256:bdbf36b7f1f77ffe7bd2a32e59235dff6ecf131e3b6b5b96061c652f30685f3a

      lastState: {}

      name: nginx

      ready: true

      restartCount: 0

      state:

        running:

          startedAt: 2019-06-13T13:13:36Z

    hostIP: 172.17.0.19

    phase: Running

    podIP: 172.18.0.5

    qosClass: BestEffort

    startTime: 2019-06-13T13:13:27Z

kind: List

metadata:

  resourceVersion: ""

  selfLink: ""

$

$

$

$

$ kubectl get pods

NAME                                   READY     STATUS    RESTARTS   AGE

busybox0                               1/1       Running   0          57s

kubernetes-bootcamp-5c69669756-pvd4b   1/1       Running   0          2m

nginx-56f766d96f-pqjx6                 1/1       Running   0          1m

$

$

$ kubectl get pods nginx-56f766d96f-pqjx6 -o yaml

apiVersion: v1

kind: Pod

metadata:

  creationTimestamp: 2019-06-13T13:13:27Z

  generateName: nginx-56f766d96f-

  labels:

    app: nginx

    pod-template-hash: "1293228529"

  name: nginx-56f766d96f-pqjx6

  namespace: default

  ownerReferences:

  - apiVersion: extensions/v1beta1

    blockOwnerDeletion: true

    controller: true

    kind: ReplicaSet

    name: nginx-56f766d96f

    uid: 083bad0a-8ddd-11e9-a542-0242ac110013

  resourceVersion: "243"

  selfLink: /api/v1/namespaces/default/pods/nginx-56f766d96f-pqjx6

  uid: 083f5c95-8ddd-11e9-a542-0242ac110013

spec:

  containers:

  - image: nginx

    imagePullPolicy: Always

    name: nginx

    resources: {}

    terminationMessagePath: /dev/termination-log

    terminationMessagePolicy: File

    volumeMounts:

    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount

      name: default-token-5srwb

      readOnly: true

  dnsPolicy: ClusterFirst

  nodeName: minikube

  restartPolicy: Always

  schedulerName: default-scheduler

  securityContext: {}

  serviceAccount: default

  serviceAccountName: default

  terminationGracePeriodSeconds: 30

  tolerations:

  - effect: NoExecute

    key: node.kubernetes.io/not-ready

    operator: Exists

    tolerationSeconds: 300

  - effect: NoExecute

    key: node.kubernetes.io/unreachable

    operator: Exists

    tolerationSeconds: 300

  volumes:

  - name: default-token-5srwb

    secret:

      defaultMode: 420

      secretName: default-token-5srwb

status:

  conditions:

  - lastProbeTime: null

    lastTransitionTime: 2019-06-13T13:13:27Z

    status: "True"

    type: Initialized

  - lastProbeTime: null

    lastTransitionTime: 2019-06-13T13:13:37Z

    status: "True"

    type: Ready

  - lastProbeTime: null

    lastTransitionTime: 2019-06-13T13:13:27Z

    status: "True"

    type: PodScheduled

  containerStatuses:

  - containerID: docker://738ffe4f7fc290588e629fb65127295bbd4cd599877d437e3d361c366e6a3129

    image: nginx:latest

    imageID: docker-pullable://nginx@sha256:bdbf36b7f1f77ffe7bd2a32e59235dff6ecf131e3b6b5b96061c652f30685f3a

    lastState: {}

    name: nginx

    ready: true

    restartCount: 0

    state:

      running:

        startedAt: 2019-06-13T13:13:36Z

  hostIP: 172.17.0.19

  phase: Running

  podIP: 172.18.0.5

  qosClass: BestEffort

  startTime: 2019-06-13T13:13:27Z

$

$

$ cd /api/v1/namespaces/default/pods/nginx-56f766d96f-pqjx6

-bash: cd: /api/v1/namespaces/default/pods/nginx-56f766d96f-pqjx6: No such file or directory

$ cd /api/v1/namespaces/default/pods/

-bash: cd: /api/v1/namespaces/default/pods/: No such file or directory

$

$

$

$ docker ps -a

CONTAINER ID        IMAGE                         COMMAND                  CREATED             STATUS              PORTS  NAMES

3bb94516112f        busybox@sha256:c888d69b73b5b444c2b0bd70da28c3da102b0aeb327f3a297626e2558def327f                         "sleep 3600"             3 minutes ago       Up 3 minutes  k8s_busybox_busybox0_default_16be35a2-8ddd-11e9-a542-0242ac110013_0

48e45384469e        k8s.gcr.io/pause-amd64:3.1                         "/pause"                 3 minutes ago       Up 3 minutes  k8s_POD_busybox0_default_16be35a2-8ddd-11e9-a542-0242ac110013_0

738ffe4f7fc2        nginx@sha256:bdbf36b7f1f77ffe7bd2a32e59235dff6ecf131e3b6b5b96061c652f30685f3a                         "nginx -g 'daemon ..."   3 minutes ago       Up 3 minutes  k8s_nginx_nginx-56f766d96f-pqjx6_default_083f5c95-8ddd-11e9-a542-0242ac110013_0

46198e137270        k8s.gcr.io/pause-amd64:3.1                         "/pause"                 4 minutes ago       Up 4 minutes  k8s_POD_nginx-56f766d96f-pqjx6_default_083f5c95-8ddd-11e9-a542-0242ac110013_0

6b83a203dc7b        8fafd8af70e9                         "/bin/sh -c 'node ..."   4 minutes ago       Up 4 minutes  k8s_kubernetes-bootcamp_kubernetes-bootcamp-5c69669756-pvd4b_default_f0fef7bc-8ddc-11e9-a542-0242ac110013_0

e25eb681a5cf        k8s.gcr.io/pause-amd64:3.1                         "/pause"                 4 minutes ago       Up 4 minutes  k8s_POD_kubernetes-bootcamp-5c69669756-pvd4b_default_f0fef7bc-8ddc-11e9-a542-0242ac110013_0

d379657dfc7a        k8s.gcr.io/k8s-dns-sidecar-amd64@sha256:9aab42bf6a2a068b797fe7d91a5d8d915b10dbbc3d6f2b10492848debfba6044         "/sidecar --v=2 --..."   4 minutes ago       Up 4 minutes  k8s_sidecar_kube-dns-6dcb57bcc8-hch7q_kube-system_e776b3c4-8ddc-11e9-a542-0242ac110013_0

ff2e48f2279f        k8s.gcr.io/k8s-dns-dnsmasq-nanny-amd64@sha256:46b933bb70270c8a02fa6b6f87d440f6f1fce1a5a2a719e164f83f7b109f7544   "/dnsmasq-nanny -v..."   4 minutes ago       Up 4 minutes  k8s_dnsmasq_kube-dns-6dcb57bcc8-hch7q_kube-system_e776b3c4-8ddc-11e9-a542-0242ac110013_0

f5a852004756        k8s.gcr.io/k8s-dns-kube-dns-amd64@sha256:1a3fc069de481ae690188f6f1ba4664b5cc7760af37120f70c86505c79eea61d        "/kube-dns --domai..."   4 minutes ago       Up 4 minutes  k8s_kubedns_kube-dns-6dcb57bcc8-hch7q_kube-system_e776b3c4-8ddc-11e9-a542-0242ac110013_0

9f90bc663824        e94d2f21bc0c                         "/dashboard --inse..."   4 minutes ago       Up 4 minutes  k8s_kubernetes-dashboard_kubernetes-dashboard-5498ccf677-q59m5_kube-system_e7534aec-8ddc-11e9-a542-0242ac110013_0

9f81ca64d5d1        k8s.gcr.io/pause-amd64:3.1                         "/pause"                 4 minutes ago       Up 4 minutes  k8s_POD_kube-dns-6dcb57bcc8-hch7q_kube-system_e776b3c4-8ddc-11e9-a542-0242ac110013_0

86c7dc04f8f6        k8s.gcr.io/pause-amd64:3.1                         "/pause"                 4 minutes ago       Up 4 minutes  k8s_POD_kubernetes-dashboard-5498ccf677-q59m5_kube-system_e7534aec-8ddc-11e9-a542-0242ac110013_0

1f0ebe996e99        4689081edb10                         "/storage-provisioner"   4 minutes ago       Up 4 minutes  k8s_storage-provisioner_storage-provisioner_kube-system_e827d6cd-8ddc-11e9-a542-0242ac110013_0

a7f9f9b886c3        k8s.gcr.io/pause-amd64:3.1                         "/pause"                 4 minutes ago       Up 4 minutes  k8s_POD_storage-provisioner_kube-system_e827d6cd-8ddc-11e9-a542-0242ac110013_0

8a1c593cf29b        9c16409588eb                         "/opt/kube-addons.sh"    4 minutes ago       Up 4 minutes  k8s_kube-addon-manager_kube-addon-manager-minikube_kube-system_3afaf06535cc3b85be93c31632b765da_0

34ad2cea9c20        k8s.gcr.io/pause-amd64:3.1                         "/pause"                 4 minutes ago       Up 4 minutes  k8s_POD_kube-addon-manager-minikube_kube-system_3afaf06535cc3b85be93c31632b765da_0

$

$

$

$

$ docker ps -a | grep nginx

738ffe4f7fc2        nginx@sha256:bdbf36b7f1f77ffe7bd2a32e59235dff6ecf131e3b6b5b96061c652f30685f3a                         "nginx -g 'daemon ..."   4 minutes ago       Up 4 minutes  k8s_nginx_nginx-56f766d96f-pqjx6_default_083f5c95-8ddd-11e9-a542-0242ac110013_0

46198e137270        k8s.gcr.io/pause-amd64:3.1                         "/pause"                 4 minutes ago       Up 4 minutes  k8s_POD_nginx-56f766d96f-pqjx6_default_083f5c95-8ddd-11e9-a542-0242ac110013_0

$

$

$

$

$ kubectl explain pods

KIND:     Pod

VERSION:  v1

 

DESCRIPTION:

     Pod is a collection of containers that can run on a host. This resource is

     created by clients and scheduled onto hosts.

 

FIELDS:

   apiVersion   <string>

     APIVersion defines the versioned schema of this representation of an

     object. Servers should convert recognized schemas to the latest internal

     value, and may reject unrecognized values. More info:

     https://git.k8s.io/community/contributors/devel/api-conventions.md#resources

 

   kind <string>

     Kind is a string value representing the REST resource this object

     represents. Servers may infer this from the endpoint the client submits

     requests to. Cannot be updated. In CamelCase. More info:

     https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds

 

   metadata     <Object>

     Standard object's metadata. More info:

     https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata

 

   spec <Object>

     Specification of the desired behavior of the pod. More info:

     https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status

 

   status       <Object>

     Most recently observed status of the pod. This data may not be up to date.

     Populated by the system. Read-only. More info:

     https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status

 

$

$

$

$ kubectl get pods --all-namespaces

NAMESPACE     NAME                                    READY     STATUS    RESTARTS   AGE

default       busybox0                                1/1       Running   0          5m

default       kubernetes-bootcamp-5c69669756-pvd4b    1/1       Running   0          6m

default       nginx-56f766d96f-pqjx6                  1/1       Running   0          6m

kube-system   kube-addon-manager-minikube             1/1       Running   0          7m

kube-system   kube-dns-6dcb57bcc8-hch7q               3/3       Running   0          7m

kube-system   kubernetes-dashboard-5498ccf677-q59m5   1/1       Running   0          7m

kube-system   storage-provisioner                     1/1       Running   0          7m

$

$

$

$ kubectl get pods

NAME                                   READY     STATUS    RESTARTS   AGE

busybox0                               1/1       Running   0          6m

kubernetes-bootcamp-5c69669756-pvd4b   1/1       Running   0          7m

nginx-56f766d96f-pqjx6                 1/1       Running   0          6m

$

$

$

$ kubectl get pods -o wide

NAME                                   READY     STATUS    RESTARTS   AGE       IP           NODE

busybox0                               1/1       Running   0          6m        172.18.0.6   minikube

kubernetes-bootcamp-5c69669756-pvd4b   1/1       Running   0          7m        172.18.0.4   minikube

nginx-56f766d96f-pqjx6                 1/1       Running   0          7m        172.18.0.5   minikube

$

$

$ kubectl get pods busybox0

NAME       READY     STATUS    RESTARTS   AGE

busybox0   1/1       Running   0          7m

$

$

$ kubectl get pods busybox0 -o wide

NAME       READY     STATUS    RESTARTS   AGE       IP           NODE

busybox0   1/1       Running   0          7m        172.18.0.6   minikube

$

$

$ kubectl get pods busybox0 -o json --export

{

    "apiVersion": "v1",

    "kind": "Pod",

    "metadata": {

        "annotations": {

            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Pod\",\"metadata\":{\"annotations\":{},\"labels\":{\"app\":\"busybox0\"},\"name\":\"busybox0\",\"namespace\":\"default\"},\"spec\":{\"containers\":[{\"command\":[\"sleep\",\"3600\"],\"image\":\"busybox\",\"imagePullPolicy\":\"IfNotPresent\",\"name\":\"busybox\"}],\"restartPolicy\":\"Always\"}}\n"

        },

        "creationTimestamp": null,

        "labels": {

            "app": "busybox0"

        },

        "name": "busybox0",

        "selfLink": "/api/v1/namespaces/default/pods/busybox0"

    },

    "spec": {

        "containers": [

            {

                "command": [

                    "sleep",

                    "3600"

                ],

                "image": "busybox",

                "imagePullPolicy": "IfNotPresent",

                "name": "busybox",

                "resources": {},

                "terminationMessagePath": "/dev/termination-log",

                "terminationMessagePolicy": "File",

                "volumeMounts": [

                    {

                        "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount",

                        "name": "default-token-5srwb",

                        "readOnly": true

                    }

                ]

            }

        ],

        "dnsPolicy": "ClusterFirst",

        "nodeName": "minikube",

        "restartPolicy": "Always",

        "schedulerName": "default-scheduler",

        "securityContext": {},

        "serviceAccount": "default",

        "serviceAccountName": "default",

        "terminationGracePeriodSeconds": 30,

        "tolerations": [

            {

                "effect": "NoExecute",

                "key": "node.kubernetes.io/not-ready",

                "operator": "Exists",

                "tolerationSeconds": 300

            },

            {

                "effect": "NoExecute",

                "key": "node.kubernetes.io/unreachable",

                "operator": "Exists",

                "tolerationSeconds": 300

            }

        ],

        "volumes": [

            {

                "name": "default-token-5srwb",

                "secret": {

                    "defaultMode": 420,

                    "secretName": "default-token-5srwb"

                }

            }

        ]

    },

    "status": {

        "phase": "Pending",

        "qosClass": "BestEffort"

    }

}

$

$

$

$ kubectl get pods busybox0 -o yaml --export

apiVersion: v1

kind: Pod

metadata:

  annotations:

    kubectl.kubernetes.io/last-applied-configuration: |

      {"apiVersion":"v1","kind":"Pod","metadata":{"annotations":{},"labels":{"app":"busybox0"},"name":"busybox0","namespace":"default"},"spec":{"containers":[{"command":["sleep","3600"],"image":"busybox","imagePullPolicy":"IfNotPresent","name":"busybox"}],"restartPolicy":"Always"}}

  creationTimestamp: null

  labels:

    app: busybox0

  name: busybox0

  selfLink: /api/v1/namespaces/default/pods/busybox0

spec:

  containers:

  - command:

    - sleep

    - "3600"

    image: busybox

    imagePullPolicy: IfNotPresent

    name: busybox

    resources: {}

    terminationMessagePath: /dev/termination-log

    terminationMessagePolicy: File

    volumeMounts:

    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount

      name: default-token-5srwb

      readOnly: true

  dnsPolicy: ClusterFirst

  nodeName: minikube

  restartPolicy: Always

  schedulerName: default-scheduler

  securityContext: {}

  serviceAccount: default

  serviceAccountName: default

  terminationGracePeriodSeconds: 30

  tolerations:

  - effect: NoExecute

    key: node.kubernetes.io/not-ready

    operator: Exists

    tolerationSeconds: 300

  - effect: NoExecute

    key: node.kubernetes.io/unreachable

    operator: Exists

    tolerationSeconds: 300

  volumes:

  - name: default-token-5srwb

    secret:

      defaultMode: 420

      secretName: default-token-5srwb

status:

  phase: Pending

  qosClass: BestEffort

$

$

$

$

$ kubectl describe pods busybox0

Name:         busybox0

Namespace:    default

Node:         minikube/172.17.0.19

Start Time:   Thu, 13 Jun 2019 13:13:52 +0000

Labels:       app=busybox0

Annotations:  kubectl.kubernetes.io/last-applied-configuration={"apiVersion":"v1","kind":"Pod","metadata":{"annotations":{},"labels":{"app":"busybox0"},"name":"busybox0","namespace":"default"},"spec":{"containers":...

Status:       Running

IP:           172.18.0.6

Containers:

  busybox:

    Container ID:  docker://3bb94516112f997d73b3f83f27f6b2086e0069eb3fe15347293ef503f1fba12b

    Image:         busybox

    Image ID:      docker-pullable://busybox@sha256:c888d69b73b5b444c2b0bd70da28c3da102b0aeb327f3a297626e2558def327f

    Port:          <none>

    Host Port:     <none>

    Command:

      sleep

      3600

    State:          Running

      Started:      Thu, 13 Jun 2019 13:13:55 +0000

    Ready:          True

    Restart Count:  0

    Environment:    <none>

   Mounts:

      /var/run/secrets/kubernetes.io/serviceaccount from default-token-5srwb (ro)

Conditions:

  Type           Status

  Initialized    True

  Ready          True

  PodScheduled   True

Volumes:

  default-token-5srwb:

    Type:        Secret (a volume populated by a Secret)

    SecretName:  default-token-5srwb

    Optional:    false

QoS Class:       BestEffort

Node-Selectors:  <none>

Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s

                 node.kubernetes.io/unreachable:NoExecute for 300s

Events:

  Type    Reason                 Age   From               Message

  ----    ------                 ----  ----               -------

  Normal  Scheduled              10m   default-scheduler  Successfully assigned busybox0 to minikube

  Normal  SuccessfulMountVolume  10m   kubelet, minikube  MountVolume.SetUp succeeded for volume "default-token-5srwb"

  Normal  Pulling                10m   kubelet, minikube  pulling image "busybox"

  Normal  Pulled                 10m   kubelet, minikube  Successfully pulled image "busybox"

  Normal  Created                10m   kubelet, minikube  Created container

  Normal  Started                10m   kubelet, minikube  Started container

$

$

$

$ kubectl get pods -o wide

NAME                                   READY     STATUS    RESTARTS   AGE       IP           NODE

busybox0                               1/1       Running   0          10m       172.18.0.6   minikube

kubernetes-bootcamp-5c69669756-pvd4b   1/1       Running   0          12m       172.18.0.4   minikube

nginx-56f766d96f-pqjx6                 1/1       Running   0          11m       172.18.0.5   minikube

$

$

$ kubectl get nodes minikube

NAME       STATUS    ROLES     AGE       VERSION

minikube   Ready     <none>    12m       v1.10.0

$

$

$ kubectl get pods --sort-by=.metadata.name

NAME                                   READY     STATUS    RESTARTS   AGE

busybox0                               1/1       Running   0          12m

kubernetes-bootcamp-5c69669756-pvd4b   1/1       Running   0          13m

nginx-56f766d96f-pqjx6                 1/1       Running   0          12m

$

$

$ kubectl get services

NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE

kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   13m

$

$

$ kubectl get pods --sort-by='.status.containerStatuses[0].restartCount'

NAME                                   READY     STATUS    RESTARTS   AGE

busybox0                               1/1       Running   0          12m

kubernetes-bootcamp-5c69669756-pvd4b   1/1       Running   0          13m

nginx-56f766d96f-pqjx6                 1/1       Running   0          13m

$

$

$

$ kubectl get pods --selector=app=cassandra rc -o \

>   jsonpath='{.items[*].metadata.labels.version}'

error: name cannot be provided when a selector is specified

$

$

$ kubectl get pods --selector=app=busybox0 rc -o   jsonpath='{.items[*].metadata.labels.version}'

error: name cannot be provided when a selector is specified

$ kubectl get pods --selector=app=busybox0 rc -o   jsonpath='{.items[*].metadata.labels.version}'

error: name cannot be provided when a selector is specified

$

$

$

$

 

 


 

