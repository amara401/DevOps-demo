#vi pod.yaml

apiVersion: v1

kind: Pod

metadata:

  name: hello-pod

  labels:

    zone: prod

    version: v1

spec:

  containers:

  - name: hello-ctr

    image: nigelpoulton/pluralsight-docker-ci:latest

    ports:

    - containerPort: 8080

 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#ReplicationContoller (rc.yaml)

apiVersion: v1

kind: ReplicationController

metadata:

  name: hello-rc

spec:

  replicas: 10

  selector:

    app: hello-world

  template:

    metadata:

      labels:

        app: hello-world

    spec:

      containers:

      - name: hello-world

        image: nigelpoulton/pluralsight-docker-ci:latest

        ports:

        - containerPort: 8080

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Services (svc.yaml)

apiVersion:v1

kind: Service

metadata:

  name: hello-svc

  labels:

    app: hello-world

spec:

  type: NodePort

  ports:

  - ports: 8080

    nodePort:30001

    protocol: TCP

  selector:

    app: hello-world

#deploy.yaml

apiVersion: extensions/v1beta1

kind: Deployment

metadata:

  name: hello-deploy

spec:

  replicas: 10

  template:

    metadata:

      labels:

        app: hello-world

    spec:

      containers:

      - name: hello-world

        image: nigelpoulton/pluralsight-docker-ci:latest

        ports:

        - containerPort: 8080

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

##Update the deployment

$ cat deploy.yaml

apiVersion: extensions/v1beta1

kind: Deployment

metadata:

  name: hello-deploy

spec:

  replicas: 10

  minReadySeconds: 10 #Wait for 10sec after each new pod comes up before mark it as ready and move onto next one

  strategy:

    type: RollingUpdate

    rollingUpdate:

      maxUnavailable: 1    # one pod going to down at a time and never having more one extra pod

      maxSurge: 1     # Never surge more than 1 of 10 i.e never more then 11 update.

  template:

    metadata:

      labels:

        app: hello-world

    spec:

      containers:

      - name: hello-world

        image: nigelpoulton/pluralsight-docker-ci:edge

        ports:

        - containerPort: 8080

$

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 

$kubectl get nodes

NAME       STATUS    ROLES     AGE       VERSION

minikube   Ready     <none>    14s       v1.10.0

$

$

$ vi pod.yaml

$

$ kubectl create -f pod.yaml

pod/hello-pod created

$

$ kubectl get pods

NAME        READY     STATUS              RESTARTS   AGE

hello-pod   0/1       ContainerCreating   0          13s

$

$

$ kubectl get pods -wide

Error: unknown shorthand flag: 'i' in -ide

 

 

Examples:

  # List all pods in ps output format.

  kubectl get pods

 

  # List all pods in ps output format with more information (such as node name).

  kubectl get pods -o wide

 

  # List a single replication controller with specified NAME in ps output format.

  kubectl get replicationcontroller web

 

  # List deployments in JSON output format, in the "v1" version of the "apps" API group:

  kubectl get deployments.v1.apps -o json

 

  # List a single pod in JSON output format.

  kubectl get -o json pod web-pod-13je7

 

  # List a pod identified by type and name specified in "pod.yaml" in JSON output format.

  kubectl get -f pod.yaml -o json

 

  # Return only the phase value of the specified pod.

  kubectl get -o template pod/web-pod-13je7 --template={{.status.phase}}

 

  # List all replication controllers and services together in ps output format.

  kubectl get rc,services

 

  # List one or more resources by their type and names.

  kubectl get rc/web service/frontend pods/web-pod-13je7

 

Options:

      --all-namespaces=false: If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.

      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.

      --chunk-size=500: Return large lists in chunks rather than all at once. Pass 0 to disable. This flag is beta and may change in the future.

      --export=false: If true, use 'export' for the resources.  Exported resources are stripped of cluster-specific information.

      --field-selector='': Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.

  -f, --filename=[]: Filename, directory, or URL to files identifying the resource to get from a server.

      --ignore-not-found=false: If the requested object does not exist the command will return exit code 0.

      --include-uninitialized=false: If true, the kubectl command applies to uninitialized objects. If explicitly set to false, this flag overrides other flags that make the kubectl commands apply to uninitialized objects, e.g., "--all". Objects with empty metadata.initializers are regarded as initialized.

  -L, --label-columns=[]: Accepts a comma separated list of labels that are going to be presented as columns. Names are case-sensitive. You can also use multiple flag options like -L label1 -L label2...

      --no-headers=false: When using the default or custom-column output format, don't print headers (default print headers).

  -o, --output='': Output format. One of: json|yaml|wide|name|custom-columns=...|custom-columns-file=...|go-template=...|go-template-file=...|jsonpath=...|jsonpath-file=... See custom columns [http://kubernetes.io/docs/user-guide/kubectl-overview/#custom-columns], golang template [http://golang.org/pkg/text/template/#pkg-overview] and jsonpath template [http://kubernetes.io/docs/user-guide/jsonpath].

      --raw='': Raw URI to request from the server.  Uses the transport specified by the kubeconfig file.

  -R, --recursive=false: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.

  -l, --selector='': Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2)

      --server-print=true: If true, have the server return the appropriate table output. Supports extensionAPIs and CRDs.

      --show-kind=false: If present, list the resource type for the requested object(s).

      --show-labels=false: When printing, show all labels as the last column (default hide labels column)

      --sort-by='': If non-empty, sort list types using this field specification.  The field specification is expressed as a JSONPath expression (e.g. '{.metadata.name}'). The field in the API resource specified by this JSONPath expression must be an integer or a string.

      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].

      --use-openapi-print-columns=false: If true, use x-kubernetes-print-column metadata (if present) from the OpenAPI schema for displaying a resource.

  -w, --watch=false: After listing/getting the requested object, watch for changes. Uninitialized objects are excluded if no object name is provided.

      --watch-only=false: Watch for changes to the requested object(s), without listing/getting first.

 

Usage:

  kubectl get [(-o|--output=)json|yaml|wide|custom-columns=...|custom-columns-file=...|go-template=...|go-template-file=...|jsonpath=...|jsonpath-file=...] (TYPE[.VERSION][.GROUP] [NAME | -l label] | TYPE[.VERSION][.GROUP]/NAME ...) [flags] [options]

 

Use "kubectl options" for a list of global command-line options (applies to all commands).

 

unknown shorthand flag: 'i' in -ide

$

$

$ kubectl get pods -o wide

NAME        READY     STATUS              RESTARTS   AGE       IP        NODE

hello-pod   0/1       ContainerCreating   0          25s       <none>    minikube

$

$

$

$ kubectl describe pods

Name:         hello-pod

Namespace:    default

Node:         minikube/172.17.0.79

Start Time:   Wed, 19 Jun 2019 09:21:17 +0000

Labels:       <none>

Annotations:  <none>

Status:       Running

IP:           172.18.0.4

Containers:

  hello-ctr:

    Container ID:   docker://5652bd3b2626c802f090cf7f0595da578deb97053b8d404f63daa5e9d9ec8975

    Image:          nigelpoulton/pluralsight-docker-ci:latest

    Image ID:       docker-pullable://nigelpoulton/pluralsight-docker-ci@sha256:7a6b0125fe7893e70dc63b2c42ad779e5866c6d2779ceb9b12a28e2c38bd8d3d

    Port:           8080/TCP

    Host Port:      0/TCP

    State:          Running

      Started:      Wed, 19 Jun 2019 09:21:50 +0000

    Ready:          True

    Restart Count:  0

    Environment:    <none>

    Mounts:

      /var/run/secrets/kubernetes.io/serviceaccount from default-token-vwckv (ro)

Conditions:

  Type           Status

  Initialized    True

  Ready          True

  PodScheduled   True

Volumes:

  default-token-vwckv:

    Type:        Secret (a volume populated by a Secret)

    SecretName:  default-token-vwckv

    Optional:    false

QoS Class:       BestEffort

Node-Selectors:  <none>

Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s

                 node.kubernetes.io/unreachable:NoExecute for 300s

Events:

  Type    Reason                 Age   From               Message

  ----    ------                 ----  ----               -------

  Normal  Scheduled              3m    default-scheduler  Successfully assigned hello-pod to minikube

  Normal  SuccessfulMountVolume  3m    kubelet, minikube  MountVolume.SetUp succeeded for volume "default-token-vwckv"

  Normal  Pulling                3m    kubelet, minikube  pulling image "nigelpoulton/pluralsight-docker-ci:latest"

  Normal  Pulled                 2m    kubelet, minikube  Successfully pulled image "nigelpoulton/pluralsight-docker-ci:latest"

  Normal  Created                2m    kubelet, minikube  Created container

  Normal  Started                2m    kubelet, minikube  Started container

$

$

$ kubectl get pods

NAME        READY     STATUS    RESTARTS   AGE

hello-pod   1/1       Running   0          5m

$

$

$ kubectl get pods/hello-pod

NAME        READY     STATUS    RESTARTS   AGE

hello-pod   1/1       Running   0          7m

$

$ kubectl get pods/hello-pod -o wide

NAME        READY     STATUS    RESTARTS   AGE       IP           NODE

hello-pod   1/1       Running   0          7m        172.18.0.4   minikube

$

$

$ kubectl get pods/hello-pod --all-namespace

Error: unknown flag: --all-namespace

 

 

Examples:

  # List all pods in ps output format.

  kubectl get pods

 

  # List all pods in ps output format with more information (such as node name).

  kubectl get pods -o wide

 

  # List a single replication controller with specified NAME in ps output format.

  kubectl get replicationcontroller web

 

  # List deployments in JSON output format, in the "v1" version of the "apps" API group:

  kubectl get deployments.v1.apps -o json

 

  # List a single pod in JSON output format.

  kubectl get -o json pod web-pod-13je7

 

  # List a pod identified by type and name specified in "pod.yaml" in JSON output format.

  kubectl get -f pod.yaml -o json

 

  # Return only the phase value of the specified pod.

  kubectl get -o template pod/web-pod-13je7 --template={{.status.phase}}

 

  # List all replication controllers and services together in ps output format.

  kubectl get rc,services

 

  # List one or more resources by their type and names.

  kubectl get rc/web service/frontend pods/web-pod-13je7

 

Options:

      --all-namespaces=false: If present, list the requested object(s) across all namespaces. Namespace in current context is ignored even if specified with --namespace.

      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.

      --chunk-size=500: Return large lists in chunks rather than all at once. Pass 0 to disable. This flag is beta and may change in the future.

      --export=false: If true, use 'export' for the resources.  Exported resources are stripped of cluster-specific information.

      --field-selector='': Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.

  -f, --filename=[]: Filename, directory, or URL to files identifying the resource to get from a server.

      --ignore-not-found=false: If the requested object does not exist the command will return exit code 0.

      --include-uninitialized=false: If true, the kubectl command applies to uninitialized objects. If explicitly set to false, this flag overrides other flags that make the kubectl commands apply to uninitialized objects, e.g., "--all". Objects with empty metadata.initializers are regarded as initialized.

  -L, --label-columns=[]: Accepts a comma separated list of labels that are going to be presented as columns. Names are case-sensitive. You can also use multiple flag options like -L label1 -L label2...

      --no-headers=false: When using the default or custom-column output format, don't print headers (default print headers).

  -o, --output='': Output format. One of: json|yaml|wide|name|custom-columns=...|custom-columns-file=...|go-template=...|go-template-file=...|jsonpath=...|jsonpath-file=... See custom columns [http://kubernetes.io/docs/user-guide/kubectl-overview/#custom-columns], golang template [http://golang.org/pkg/text/template/#pkg-overview] and jsonpath template [http://kubernetes.io/docs/user-guide/jsonpath].

      --raw='': Raw URI to request from the server.  Uses the transport specified by the kubeconfig file.

  -R, --recursive=false: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.

  -l, --selector='': Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2)

      --server-print=true: If true, have the server return the appropriate table output. Supports extensionAPIs and CRDs.

      --show-kind=false: If present, list the resource type for the requested object(s).

      --show-labels=false: When printing, show all labels as the last column (default hide labels column)

      --sort-by='': If non-empty, sort list types using this field specification.  The field specification is expressed as a JSONPath expression (e.g. '{.metadata.name}'). The field in the API resource specified by this JSONPath expression must be an integer or a string.

      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].

      --use-openapi-print-columns=false: If true, use x-kubernetes-print-column metadata (if present) from the OpenAPI schema for displaying a resource.

  -w, --watch=false: After listing/getting the requested object, watch for changes. Uninitialized objects are excluded if no object name is provided.

      --watch-only=false: Watch for changes to the requested object(s), without listing/getting first.

 

Usage:

  kubectl get [(-o|--output=)json|yaml|wide|custom-columns=...|custom-columns-file=...|go-template=...|go-template-file=...|jsonpath=...|jsonpath-file=...] (TYPE[.VERSION][.GROUP] [NAME | -l label] | TYPE[.VERSION][.GROUP]/NAME ...) [flags] [options]

 

Use "kubectl options" for a list of global command-line options (applies to all commands).

 

unknown flag: --all-namespace

$

$

$ kubectl get pods/hello-pod --all-namespaces

error: a resource cannot be retrieved by name across all namespaces

$

$

$

$ kubectl get pods --all-namespaces

NAMESPACE     NAME                                    READY     STATUS    RESTARTS   AGE

default       hello-pod                               1/1       Running   0          9m

kube-system   kube-addon-manager-minikube             1/1       Running   0          14m

kube-system   kube-dns-6dcb57bcc8-mkc77               3/3       Running   0          14m

kube-system   kubernetes-dashboard-5498ccf677-l5jx5   1/1       Running   0          14m

kube-system   storage-provisioner                     1/1       Running   0          14m

$

$

$ kubectl delete pods hello-pod

pod "hello-pod" deleted

 

$

$

$

$ kubectl get pods

No resources found.

$

$

$ vi rc.yaml

$

$ kubectl create -f rc.yaml

error: error parsing rc.yaml: error converting YAML to JSON: yaml: line 16: found a tab character that violate indentation

$

$

$ vi rc.yaml

$

$

$ vi rc.yaml

$

$

$ kubectl create -f rc.yaml

replicationcontroller/hello-rc created

$

$

$ kubectl get rc

NAME       DESIRED   CURRENT   READY     AGE

hello-rc   10        10        8         15s

$

$

$

$

$ kubectl get rc

NAME       DESIRED   CURRENT   READY     AGE

hello-rc   10        10        10        21s

$

$

$ kubectl describe rc

Name:         hello-rc

Namespace:    default

Selector:     app=hello-world

Labels:       app=hello-world

Annotations:  <none>

Replicas:     10 current / 10 desired

Pods Status:  10 Running / 0 Waiting / 0 Succeeded / 0 Failed

Pod Template:

  Labels:  app=hello-world

  Containers:

   hello-world:

    Image:        nigelpoulton/pluralsight-docker-ci:latest

    Port:         8080/TCP

    Host Port:    0/TCP

    Environment:  <none>

   Mounts:       <none>

  Volumes:        <none>

Events:

  Type    Reason            Age   From                    Message

  ----    ------            ----  ----                    -------

  Normal  SuccessfulCreate  48s   replication-controller  Created pod: hello-rc-b79vp

  Normal  SuccessfulCreate  48s   replication-controller  Created pod: hello-rc-8fs2k

  Normal  SuccessfulCreate  48s   replication-controller  Created pod: hello-rc-pc7vw

  Normal  SuccessfulCreate  48s   replication-controller  Created pod: hello-rc-fsg4r

  Normal  SuccessfulCreate  48s   replication-controller  Created pod: hello-rc-h5cvg

  Normal  SuccessfulCreate  48s   replication-controller  Created pod: hello-rc-pcnb2

  Normal  SuccessfulCreate  48s   replication-controller  Created pod: hello-rc-blchv

  Normal  SuccessfulCreate  48s   replication-controller  Created pod: hello-rc-ck2pr

  Normal  SuccessfulCreate  48s   replication-controller  Created pod: hello-rc-f6dxb

  Normal  SuccessfulCreate  48s   replication-controller  (combined from similar events): Created pod: hello-rc-fptfl

$

$

$ kubectl get pods

NAME             READY     STATUS    RESTARTS   AGE

hello-rc-8fs2k   1/1       Running   0          1m

hello-rc-b79vp   1/1       Running   0          1m

hello-rc-blchv   1/1       Running   0          1m

hello-rc-ck2pr   1/1       Running   0          1m

hello-rc-f6dxb   1/1       Running   0          1m

hello-rc-fptfl   1/1       Running   0          1m

hello-rc-fsg4r   1/1       Running   0          1m

hello-rc-h5cvg   1/1       Running   0          1m

hello-rc-pc7vw   1/1       Running   0          1m

hello-rc-pcnb2   1/1       Running   0          1m

$

$

$

$ kubectl describe pods

Name:           hello-rc-8fs2k

Namespace:      default

Node:           minikube/172.17.0.79

Start Time:     Wed, 19 Jun 2019 09:44:05 +0000

Labels:         app=hello-world

Annotations:    <none>

Status:         Running

IP:             172.18.0.6

Controlled By:  ReplicationController/hello-rc

Containers:

  hello-world:

    Container ID:   docker://6447ca5ab34456095d827d1c7bed601949ae1d8577ffc1213b4f1e1b39eed353

    Image:          nigelpoulton/pluralsight-docker-ci:latest

    Image ID:       docker-pullable://nigelpoulton/pluralsight-docker-ci@sha256:7a6b0125fe7893e70dc63b2c42ad779e5866c6d2779ceb9b12a28e2c38bd8d3d

    Port:           8080/TCP

    Host Port:      0/TCP

    State:          Running

      Started:      Wed, 19 Jun 2019 09:44:11 +0000

    Ready:          True

    Restart Count:  0

    Environment:    <none>

    Mounts:

      /var/run/secrets/kubernetes.io/serviceaccount from default-token-vwckv (ro)

Conditions:

  Type           Status

  Initialized    True

  Ready          True

  PodScheduled   True

Volumes:

  default-token-vwckv:

    Type:        Secret (a volume populated by a Secret)

    SecretName:  default-token-vwckv

    Optional:    false

QoS Class:       BestEffort

Node-Selectors:  <none>

Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s

                 node.kubernetes.io/unreachable:NoExecute for 300s

Events:

  Type    Reason                 Age   From               Message

  ----    ------                 ----  ----               -------

  Normal  Scheduled              2m    default-scheduler  Successfully assigned hello-rc-8fs2k to minikube

  Normal  SuccessfulMountVolume  2m    kubelet, minikube  MountVolume.SetUp succeeded for volume "default-token-vwckv"

  Normal  Pulling                2m    kubelet, minikube  pulling image "nigelpoulton/pluralsight-docker-ci:latest"

  Normal  Pulled                 2m    kubelet, minikube  Successfully pulled image "nigelpoulton/pluralsight-docker-ci:latest"

  Normal  Created                2m    kubelet, minikube  Created container

  Normal  Started                2m    kubelet, minikube  Started container

 

 

Name:           hello-rc-b79vp

Namespace:      default

Node:           minikube/172.17.0.79

Start Time:     Wed, 19 Jun 2019 09:44:05 +0000

Labels:         app=hello-world

Annotations:    <none>

Status:         Running

IP:             172.18.0.4

Controlled By:  ReplicationController/hello-rc

Containers:

  hello-world:

    Container ID:   docker://2bee6548aaabdd080ca41009c7f9ef7ee654fdd4918681469ef516a3c5f3f509

    Image:          nigelpoulton/pluralsight-docker-ci:latest

    Image ID:       docker-pullable://nigelpoulton/pluralsight-docker-ci@sha256:7a6b0125fe7893e70dc63b2c42ad779e5866c6d2779ceb9b12a28e2c38bd8d3d

    Port:           8080/TCP

    Host Port:      0/TCP

    State:          Running

      Started:      Wed, 19 Jun 2019 09:44:08 +0000

    Ready:          True

    Restart Count:  0

    Environment:    <none>

    Mounts:

      /var/run/secrets/kubernetes.io/serviceaccount from default-token-vwckv (ro)

Conditions:

  Type           Status

  Initialized    True

  Ready          True

  PodScheduled   True

Volumes:

  default-token-vwckv:

    Type:        Secret (a volume populated by a Secret)

    SecretName:  default-token-vwckv

    Optional:    false

QoS Class:       BestEffort

Node-Selectors:  <none>

Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s

                 node.kubernetes.io/unreachable:NoExecute for 300s

Events:

  Type    Reason                 Age   From               Message

  ----    ------                 ----  ----               -------

  Normal  Scheduled              2m    default-scheduler  Successfully assigned hello-rc-b79vp to minikube

  Normal  SuccessfulMountVolume  2m    kubelet, minikube  MountVolume.SetUp succeeded for volume "default-token-vwckv"

  Normal  Pulling                2m    kubelet, minikube  pulling image "nigelpoulton/pluralsight-docker-ci:latest"

  Normal  Pulled                 2m    kubelet, minikube  Successfully pulled image "nigelpoulton/pluralsight-docker-ci:latest"

  Normal  Created                2m    kubelet, minikube  Created container

  Normal  Started                2m    kubelet, minikube  Started container

 

 

Name:           hello-rc-blchv

Namespace:      default

Node:           minikube/172.17.0.79

Start Time:     Wed, 19 Jun 2019 09:44:05 +0000

Labels:         app=hello-world

Annotations:    <none>

Status:         Running

IP:             172.18.0.9

Controlled By:  ReplicationController/hello-rc

Containers:

  hello-world:

    Container ID:   docker://13c61b196ef41f317d477c11eb26e7492f2295c98e825a1f6f0ed379fc812379

    Image:          nigelpoulton/pluralsight-docker-ci:latest

    Image ID:       docker-pullable://nigelpoulton/pluralsight-docker-ci@sha256:7a6b0125fe7893e70dc63b2c42ad779e5866c6d2779ceb9b12a28e2c38bd8d3d

    Port:           8080/TCP

    Host Port:      0/TCP

    State:          Running

      Started:      Wed, 19 Jun 2019 09:44:15 +0000

    Ready:          True

    Restart Count:  0

    Environment:    <none>

    Mounts:

      /var/run/secrets/kubernetes.io/serviceaccount from default-token-vwckv (ro)

Conditions:

  Type           Status

  Initialized    True

  Ready          True

  PodScheduled   True

Volumes:

  default-token-vwckv:

    Type:        Secret (a volume populated by a Secret)

    SecretName:  default-token-vwckv

    Optional:    false

QoS Class:       BestEffort

Node-Selectors:  <none>

Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s

                 node.kubernetes.io/unreachable:NoExecute for 300s

Events:

  Type    Reason                 Age   From               Message

  ----    ------                 ----  ----               -------

  Normal  Scheduled              2m    default-scheduler  Successfully assigned hello-rc-blchv to minikube

  Normal  SuccessfulMountVolume  2m    kubelet, minikube  MountVolume.SetUp succeeded for volume "default-token-vwckv"

  Normal  Pulling                2m    kubelet, minikube  pulling image "nigelpoulton/pluralsight-docker-ci:latest"

  Normal  Pulled                 2m    kubelet, minikube  Successfully pulled image "nigelpoulton/pluralsight-docker-ci:latest"

  Normal  Created                2m    kubelet, minikube  Created container

  Normal  Started                2m    kubelet, minikube  Started container

 

 

Name:           hello-rc-ck2pr

Namespace:      default

Node:           minikube/172.17.0.79

Start Time:     Wed, 19 Jun 2019 09:44:05 +0000

Labels:         app=hello-world

Annotations:    <none>

Status:         Running

IP:             172.18.0.12

Controlled By:  ReplicationController/hello-rc

Containers:

  hello-world:

    Container ID:   docker://c71f4f1096080a5f61a0e235c3c8340e103392a18e7ec3559efe0abe67bb336e

    Image:          nigelpoulton/pluralsight-docker-ci:latest

    Image ID:       docker-pullable://nigelpoulton/pluralsight-docker-ci@sha256:7a6b0125fe7893e70dc63b2c42ad779e5866c6d2779ceb9b12a28e2c38bd8d3d

    Port:           8080/TCP

    Host Port:      0/TCP

    State:          Running

      Started:      Wed, 19 Jun 2019 09:44:19 +0000

    Ready:          True

    Restart Count:  0

    Environment:    <none>

    Mounts:

      /var/run/secrets/kubernetes.io/serviceaccount from default-token-vwckv (ro)

Conditions:

  Type           Status

  Initialized    True

  Ready          True

  PodScheduled   True

Volumes:

  default-token-vwckv:

    Type:        Secret (a volume populated by a Secret)

    SecretName:  default-token-vwckv

    Optional:    false

QoS Class:       BestEffort

Node-Selectors:  <none>

Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s

                 node.kubernetes.io/unreachable:NoExecute for 300s

Events:

  Type    Reason                 Age   From               Message

  ----    ------                 ----  ----               -------

  Normal  Scheduled              2m    default-scheduler  Successfully assigned hello-rc-ck2pr to minikube

  Normal  SuccessfulMountVolume  2m    kubelet, minikube  MountVolume.SetUp succeeded for volume "default-token-vwckv"

  Normal  Pulling                2m    kubelet, minikube  pulling image "nigelpoulton/pluralsight-docker-ci:latest"

  Normal  Pulled                 2m    kubelet, minikube  Successfully pulled image "nigelpoulton/pluralsight-docker-ci:latest"

  Normal  Created                2m    kubelet, minikube  Created container

  Normal  Started                2m    kubelet, minikube  Started container

 

 

Name:           hello-rc-f6dxb

Namespace:      default

Node:           minikube/172.17.0.79

Start Time:     Wed, 19 Jun 2019 09:44:05 +0000

Labels:         app=hello-world

Annotations:    <none>

Status:         Running

IP:             172.18.0.11

Controlled By:  ReplicationController/hello-rc

Containers:

  hello-world:

    Container ID:   docker://bbe5314d0c842858723f56dd86656469e83affb46fb96514043e49d08fefb43a

    Image:          nigelpoulton/pluralsight-docker-ci:latest

    Image ID:       docker-pullable://nigelpoulton/pluralsight-docker-ci@sha256:7a6b0125fe7893e70dc63b2c42ad779e5866c6d2779ceb9b12a28e2c38bd8d3d

    Port:           8080/TCP

    Host Port:      0/TCP

    State:          Running

      Started:      Wed, 19 Jun 2019 09:44:18 +0000

    Ready:          True

    Restart Count:  0

    Environment:    <none>

    Mounts:

      /var/run/secrets/kubernetes.io/serviceaccount from default-token-vwckv (ro)

Conditions:

  Type           Status

  Initialized    True

  Ready          True

  PodScheduled   True

Volumes:

  default-token-vwckv:

    Type:        Secret (a volume populated by a Secret)

    SecretName:  default-token-vwckv

    Optional:    false

QoS Class:       BestEffort

Node-Selectors:  <none>

Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s

                 node.kubernetes.io/unreachable:NoExecute for 300s

Events:

  Type    Reason                 Age   From               Message

  ----    ------                 ----  ----               -------

  Normal  Scheduled              2m    default-scheduler  Successfully assigned hello-rc-f6dxb to minikube

  Normal  SuccessfulMountVolume  2m    kubelet, minikube  MountVolume.SetUp succeeded for volume "default-token-vwckv"

  Normal  Pulling                2m    kubelet, minikube  pulling image "nigelpoulton/pluralsight-docker-ci:latest"

  Normal  Pulled                 2m    kubelet, minikube  Successfully pulled image "nigelpoulton/pluralsight-docker-ci:latest"

  Normal  Created                2m    kubelet, minikube  Created container

  Normal  Started                2m    kubelet, minikube  Started container

 

 

Name:           hello-rc-fptfl

Namespace:      default

Node:           minikube/172.17.0.79

Start Time:     Wed, 19 Jun 2019 09:44:05 +0000

Labels:         app=hello-world

Annotations:    <none>

Status:         Running

IP:             172.18.0.13

Controlled By:  ReplicationController/hello-rc

Containers:

  hello-world:

    Container ID:   docker://3751f19d326600722e79e075f9b4a749c8f161bd82f8565baa2490d466fcc839

    Image:          nigelpoulton/pluralsight-docker-ci:latest

    Image ID:       docker-pullable://nigelpoulton/pluralsight-docker-ci@sha256:7a6b0125fe7893e70dc63b2c42ad779e5866c6d2779ceb9b12a28e2c38bd8d3d

    Port:           8080/TCP

    Host Port:      0/TCP

    State:          Running

      Started:      Wed, 19 Jun 2019 09:44:21 +0000

    Ready:          True

    Restart Count:  0

    Environment:    <none>

    Mounts:

      /var/run/secrets/kubernetes.io/serviceaccount from default-token-vwckv (ro)

Conditions:

  Type           Status

  Initialized    True

  Ready          True

  PodScheduled   True

Volumes:

  default-token-vwckv:

    Type:        Secret (a volume populated by a Secret)

    SecretName:  default-token-vwckv

    Optional:    false

QoS Class:       BestEffort

Node-Selectors:  <none>

Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s

                 node.kubernetes.io/unreachable:NoExecute for 300s

Events:

  Type    Reason                 Age   From               Message

  ----    ------                 ----  ----               -------

  Normal  Scheduled              2m    default-scheduler  Successfully assigned hello-rc-fptfl to minikube

  Normal  SuccessfulMountVolume  2m    kubelet, minikube  MountVolume.SetUp succeeded for volume "default-token-vwckv"

  Normal  Pulling                2m    kubelet, minikube  pulling image "nigelpoulton/pluralsight-docker-ci:latest"

  Normal  Pulled                 2m    kubelet, minikube  Successfully pulled image "nigelpoulton/pluralsight-docker-ci:latest"

  Normal  Created                2m    kubelet, minikube  Created container

  Normal  Started                2m    kubelet, minikube  Started container

 

 

Name:           hello-rc-fsg4r

Namespace:      default

Node:           minikube/172.17.0.79

Start Time:     Wed, 19 Jun 2019 09:44:05 +0000

Labels:         app=hello-world

Annotations:    <none>

Status:         Running

IP:             172.18.0.8

Controlled By:  ReplicationController/hello-rc

Containers:

  hello-world:

    Container ID:   docker://8d5b40b4fd5c034eb55144d2f24fdb6172505f5601173c7cede0208a5db3594b

    Image:          nigelpoulton/pluralsight-docker-ci:latest

    Image ID:       docker-pullable://nigelpoulton/pluralsight-docker-ci@sha256:7a6b0125fe7893e70dc63b2c42ad779e5866c6d2779ceb9b12a28e2c38bd8d3d

    Port:           8080/TCP

    Host Port:      0/TCP

    State:          Running

      Started:      Wed, 19 Jun 2019 09:44:14 +0000

    Ready:          True

    Restart Count:  0

    Environment:    <none>

    Mounts:

      /var/run/secrets/kubernetes.io/serviceaccount from default-token-vwckv (ro)

Conditions:

  Type           Status

  Initialized    True

  Ready          True

  PodScheduled   True

Volumes:

  default-token-vwckv:

    Type:        Secret (a volume populated by a Secret)

    SecretName:  default-token-vwckv

    Optional:    false

QoS Class:       BestEffort

Node-Selectors:  <none>

Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s

                 node.kubernetes.io/unreachable:NoExecute for 300s

Events:

  Type    Reason                 Age   From               Message

  ----    ------                 ----  ----               -------

  Normal  Scheduled              2m    default-scheduler  Successfully assigned hello-rc-fsg4r to minikube

  Normal  SuccessfulMountVolume  2m    kubelet, minikube  MountVolume.SetUp succeeded for volume "default-token-vwckv"

  Normal  Pulling                2m    kubelet, minikube  pulling image "nigelpoulton/pluralsight-docker-ci:latest"

  Normal  Pulled                 2m    kubelet, minikube  Successfully pulled image "nigelpoulton/pluralsight-docker-ci:latest"

  Normal  Created                2m    kubelet, minikube  Created container

  Normal  Started                2m    kubelet, minikube  Started container

 

 

Name:           hello-rc-h5cvg

Namespace:      default

Node:           minikube/172.17.0.79

Start Time:     Wed, 19 Jun 2019 09:44:05 +0000

Labels:         app=hello-world

Annotations:    <none>

Status:         Running

IP:             172.18.0.10

Controlled By:  ReplicationController/hello-rc

Containers:

  hello-world:

    Container ID:   docker://173d23c688e5ad6937821354a423c1305408f1c7bd3a0c2f78744ce6790cd16b

    Image:          nigelpoulton/pluralsight-docker-ci:latest

    Image ID:       docker-pullable://nigelpoulton/pluralsight-docker-ci@sha256:7a6b0125fe7893e70dc63b2c42ad779e5866c6d2779ceb9b12a28e2c38bd8d3d

    Port:           8080/TCP

    Host Port:      0/TCP

    State:          Running

      Started:      Wed, 19 Jun 2019 09:44:17 +0000

    Ready:          True

    Restart Count:  0

    Environment:    <none>

    Mounts:

      /var/run/secrets/kubernetes.io/serviceaccount from default-token-vwckv (ro)

Conditions:

  Type           Status

  Initialized    True

  Ready          True

  PodScheduled   True

Volumes:

  default-token-vwckv:

    Type:        Secret (a volume populated by a Secret)

    SecretName:  default-token-vwckv

    Optional:    false

QoS Class:       BestEffort

Node-Selectors:  <none>

Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s

                 node.kubernetes.io/unreachable:NoExecute for 300s

Events:

  Type    Reason                 Age   From               Message

  ----    ------                 ----  ----               -------

  Normal  Scheduled              2m    default-scheduler  Successfully assigned hello-rc-h5cvg to minikube

  Normal  SuccessfulMountVolume  2m    kubelet, minikube  MountVolume.SetUp succeeded for volume "default-token-vwckv"

  Normal  Pulling                2m    kubelet, minikube  pulling image "nigelpoulton/pluralsight-docker-ci:latest"

  Normal  Pulled                 2m    kubelet, minikube  Successfully pulled image "nigelpoulton/pluralsight-docker-ci:latest"

  Normal  Created                2m    kubelet, minikube  Created container

  Normal  Started                2m    kubelet, minikube  Started container

 

 

Name:           hello-rc-pc7vw

Namespace:      default

Node:           minikube/172.17.0.79

Start Time:     Wed, 19 Jun 2019 09:44:05 +0000

Labels:         app=hello-world

Annotations:    <none>

Status:         Running

IP:             172.18.0.5

Controlled By:  ReplicationController/hello-rc

Containers:

  hello-world:

    Container ID:   docker://049d75d93b2a3d1171db53a0cddec454a2674dd3243df772ada115d72f53f31b

    Image:          nigelpoulton/pluralsight-docker-ci:latest

    Image ID:       docker-pullable://nigelpoulton/pluralsight-docker-ci@sha256:7a6b0125fe7893e70dc63b2c42ad779e5866c6d2779ceb9b12a28e2c38bd8d3d

    Port:           8080/TCP

    Host Port:      0/TCP

    State:          Running

      Started:      Wed, 19 Jun 2019 09:44:09 +0000

    Ready:          True

    Restart Count:  0

    Environment:    <none>

    Mounts:

      /var/run/secrets/kubernetes.io/serviceaccount from default-token-vwckv (ro)

Conditions:

  Type           Status

  Initialized    True

  Ready          True

  PodScheduled   True

Volumes:

  default-token-vwckv:

    Type:        Secret (a volume populated by a Secret)

    SecretName:  default-token-vwckv

    Optional:    false

QoS Class:       BestEffort

Node-Selectors:  <none>

Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s

                 node.kubernetes.io/unreachable:NoExecute for 300s

Events:

  Type    Reason                 Age   From               Message

  ----    ------                 ----  ----               -------

  Normal  Scheduled              2m    default-scheduler  Successfully assigned hello-rc-pc7vw to minikube

  Normal  SuccessfulMountVolume  2m    kubelet, minikube  MountVolume.SetUp succeeded for volume "default-token-vwckv"

  Normal  Pulling                2m    kubelet, minikube  pulling image "nigelpoulton/pluralsight-docker-ci:latest"

  Normal  Pulled                 2m    kubelet, minikube  Successfully pulled image "nigelpoulton/pluralsight-docker-ci:latest"

  Normal  Created                2m    kubelet, minikube  Created container

  Normal  Started                2m    kubelet, minikube  Started container

 

 

Name:           hello-rc-pcnb2

Namespace:      default

Node:           minikube/172.17.0.79

Start Time:     Wed, 19 Jun 2019 09:44:05 +0000

Labels:         app=hello-world

Annotations:    <none>

Status:         Running

IP:             172.18.0.7

Controlled By:  ReplicationController/hello-rc

Containers:

  hello-world:

    Container ID:   docker://88b2b628ef18a32b2c566c20378c14390b6525c2b58ed30c8ca7a7294eb38542

    Image:          nigelpoulton/pluralsight-docker-ci:latest

    Image ID:       docker-pullable://nigelpoulton/pluralsight-docker-ci@sha256:7a6b0125fe7893e70dc63b2c42ad779e5866c6d2779ceb9b12a28e2c38bd8d3d

    Port:           8080/TCP

    Host Port:      0/TCP

    State:          Running

      Started:      Wed, 19 Jun 2019 09:44:12 +0000

    Ready:          True

    Restart Count:  0

    Environment:    <none>

    Mounts:

      /var/run/secrets/kubernetes.io/serviceaccount from default-token-vwckv (ro)

Conditions:

  Type           Status

  Initialized    True

  Ready          True

  PodScheduled   True

Volumes:

  default-token-vwckv:

    Type:        Secret (a volume populated by a Secret)

    SecretName:  default-token-vwckv

    Optional:    false

QoS Class:       BestEffort

Node-Selectors:  <none>

Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s

                 node.kubernetes.io/unreachable:NoExecute for 300s

Events:

  Type    Reason                 Age   From               Message

  ----    ------                 ----  ----               -------

  Normal  Scheduled              2m    default-scheduler  Successfully assigned hello-rc-pcnb2 to minikube

  Normal  SuccessfulMountVolume  2m    kubelet, minikube  MountVolume.SetUp succeeded for volume "default-token-vwckv"

  Normal  Pulling                2m    kubelet, minikube  pulling image "nigelpoulton/pluralsight-docker-ci:latest"

  Normal  Pulled                 2m    kubelet, minikube  Successfully pulled image "nigelpoulton/pluralsight-docker-ci:latest"

  Normal  Created                2m    kubelet, minikube  Created container

  Normal  Started                2m    kubelet, minikube  Started container

$

$

$

$

$

$ vi rc.yaml    #Updated RC with 20

$

$

$ kubectl apply -f rc.yaml

Warning: kubectl apply should be used on resource created by either kubectl create --save-config or kubectlapply

replicationcontroller/hello-rc configured

$

$

$ kubectl get rc

NAME       DESIRED   CURRENT   READY     AGE

hello-rc   20        20        15        5m

$

$

$ kubectl describe rc

Name:         hello-rc

Namespace:    default

Selector:     app=hello-world

Labels:       app=hello-world

Annotations:  kubectl.kubernetes.io/last-applied-configuration={"apiVersion":"v1","kind":"ReplicationController","metadata":{"annotations":{},"name":"hello-rc","namespace":"default"},"spec":{"replicas":20,"selector...

Replicas:     20 current / 20 desired

Pods Status:  20 Running / 0 Waiting / 0 Succeeded / 0 Failed

Pod Template:

  Labels:  app=hello-world

  Containers:

   hello-world:

    Image:        nigelpoulton/pluralsight-docker-ci:latest

    Port:         8080/TCP

    Host Port:    0/TCP

    Environment:  <none>

    Mounts:       <none>

  Volumes:        <none>

Events:

  Type    Reason            Age                From                    Message

  ----    ------            ----               ----                    -------

  Normal  SuccessfulCreate  5m                 replication-controller  Created pod: hello-rc-b79vp

  Normal  SuccessfulCreate  5m                 replication-controller  Created pod: hello-rc-8fs2k

  Normal  SuccessfulCreate  5m                 replication-controller  Created pod: hello-rc-pc7vw

  Normal  SuccessfulCreate  5m                 replication-controller  Created pod: hello-rc-fsg4r

  Normal  SuccessfulCreate  5m                 replication-controller  Created pod: hello-rc-h5cvg

  Normal  SuccessfulCreate  5m                 replication-controller  Created pod: hello-rc-pcnb2

  Normal  SuccessfulCreate  5m                 replication-controller  Created pod: hello-rc-blchv

  Normal  SuccessfulCreate  5m                 replication-controller  Created pod: hello-rc-ck2pr

  Normal  SuccessfulCreate  5m                 replication-controller  Created pod: hello-rc-f6dxb

  Normal  SuccessfulCreate  22s (x11 over 5m)  replication-controller  (combined from similar events): Created pod: hello-rc-phdgw

$

$

$ kubectl get rc

NAME       DESIRED   CURRENT   READY     AGE

hello-rc   20        20        20        5m

$

$

$ kubectl get pods

NAME             READY     STATUS    RESTARTS   AGE

hello-rc-2tpkj   1/1       Running   0          40s

hello-rc-86ddl   1/1       Running   0          40s

hello-rc-87j44   1/1       Running   0          40s

hello-rc-8fs2k   1/1       Running   0          5m

hello-rc-b79vp   1/1       Running   0          5m

hello-rc-bfhvd   1/1       Running   0          40s

hello-rc-blchv   1/1       Running   0          5m

hello-rc-bp8tz   1/1       Running   0          40s

hello-rc-ck2pr   1/1       Running   0          5m

hello-rc-f6dxb   1/1       Running   0          5m

hello-rc-fptfl   1/1       Running   0          5m

hello-rc-fsg4r   1/1       Running   0          5m

hello-rc-h5cvg   1/1       Running   0          5m

hello-rc-km4f6   1/1       Running   0          40s

hello-rc-kwxzv   1/1       Running   0          40s

hello-rc-pc7vw   1/1       Running   0          5m

hello-rc-pcnb2   1/1       Running   0          5m

hello-rc-phdgw   1/1       Running   0          40s

hello-rc-q2t7n   1/1       Running   0          40s

hello-rc-tdm6b   1/1       Running   0          40s

$

$

$ $ kubectl version

Client Version: version.Info{Major:"1", Minor:"11", GitVersion:"v1.11.0", GitCommit:"91e7b4fd31fcd3d5f436da26c980becec37ceefe", GitTreeState:"clean", BuildDate:"2018-06-27T20:17:28Z", GoVersion:"go1.10.2", Compiler:"gc", Platform:"linux/amd64"}

Server Version: version.Info{Major:"1", Minor:"10", GitVersion:"v1.10.0", GitCommit:"fc32d2f3698e36b93322a3465f63a14e9f0eaead", GitTreeState:"clean", BuildDate:"2018-04-10T12:46:31Z", GoVersion:"go1.9.4", Compiler:"gc", Platform:"linux/amd64"}

$

$

$ vi rc.yaml

$

$

$ kubectl create -f rc.yaml

replicationcontroller/hello-rc created

$

$

$

$

$ kubectl get rc

NAME       DESIRED   CURRENT   READY     AGE

hello-rc   10        10        10        43s

$

$

$ kubectl expose rc hello-rc --name=hell-svc --target-port=8080 --type=NodePort

service/hell-svc exposed

$

$

$ kubectl get svc

NAME         TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)          AGE

hell-svc     NodePort    10.96.228.51   <none>        8080:30057/TCP   9s

kubernetes   ClusterIP   10.96.0.1      <none>        443/TCP          42m

$

$

$ kubectl describe svc

Name:                     hell-svc

Namespace:                default

Labels:                   app=hello-world

Annotations:              <none>

Selector:                 app=hello-world

Type:                     NodePort

IP:                       10.96.228.51

Port:                     <unset>  8080/TCP

TargetPort:               8080/TCP

NodePort:                 <unset>  30057/TCP

Endpoints:                172.18.0.10:8080,172.18.0.11:8080,172.18.0.12:8080 + 7 more...

Session Affinity:         None

External Traffic Policy:  Cluster

Events:                   <none>

 

 

Name:              kubernetes

Namespace:         default

Labels:            component=apiserver

                   provider=kubernetes

Annotations:       <none>

Selector:          <none>

Type:              ClusterIP

IP:                10.96.0.1

Port:              https  443/TCP

TargetPort:        8443/TCP

Endpoints:         172.17.0.6:8443

Session Affinity:  ClientIP

Events:            <none>

$

$

$ kubectl get nodes

NAME       STATUS    ROLES     AGE       VERSION

minikube   Ready     <none>    45m       v1.10.0

$

$

$ kubectl get nodes -o wide

NAME       STATUS    ROLES     AGE       VERSION   EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION      CONTAINER-RUNTIME

minikube   Ready     <none>    45m       v1.10.0   <none>        Ubuntu 16.04.2 LTS   4.4.0-138-generic   docker://17.3.0

$

$

$ kubectl get svc

NAME         TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)          AGE

hell-svc     NodePort    10.96.228.51   <none>        8080:30057/TCP   4m

kubernetes   ClusterIP   10.96.0.1      <none>        443/TCP          46m

$

$

$ kubectl delete svc hell-svc

service "hell-svc" deleted

$

$

$ kubectl get svc

NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE

kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   47m

$

$

$ vi svc.yaml

$

$

$ kubectl create -f svc.yaml

error: error parsing svc.yaml: error converting YAML to JSON: yaml: line 1: mapping values are not allowed in this context

$

$

$ vi svc.yaml

$

$ kubectl create -f svc.yaml

error: error validating "svc.yaml": error validating data: [ValidationError(Service.spec.ports[0]): unknownfield "ports" in io.k8s.api.core.v1.ServicePort, ValidationError(Service.spec.ports[0]): missing required field "port" in io.k8s.api.core.v1.ServicePort]; if you choose to ignore these errors, turn validation off with --validate=false

$

$

$ kubectl create -f svc.yaml ^C

$

$

$ kubectl get pods

NAME             READY     STATUS    RESTARTS   AGE

hello-rc-ccbkf   1/1       Running   0          10m

hello-rc-f8bpw   1/1       Running   0          10m

hello-rc-gbk2r   1/1       Running   0          10m

hello-rc-gsg9t   1/1       Running   0          10m

hello-rc-jklfn   1/1       Running   0          10m

hello-rc-k6dzx   1/1       Running   0          10m

hello-rc-qd298   1/1       Running   0          10m

hello-rc-qmzkj   1/1       Running   0          10m

hello-rc-stq2q   1/1       Running   0          10m

hello-rc-wg26z   1/1       Running   0          10m

$

$

$ ls -la

total 48

drwx------  6 root root 4096 Jun 19 11:31 .

drwxr-xr-x 23 root root 4096 Oct 25  2018 ..

-rw-r--r--  1 root root 3194 Oct 25  2018 .bashrc

drwx------  2 root root 4096 Jun 19 10:25 .cache

-rw-r--r--  1 root root    0 Oct 25  2018 .hushlogin

-rw-r--r--  1 root root   22 Jun 19 10:41 katacoda-finished

drwxr-xr-x  4 root root 4096 Jun 19 11:21 .kube

drwxr-xr-x 10 root root 4096 Oct 25  2018 .minikube

-rw-r--r--  1 root root  148 Aug 17  2015 .profile

-rw-r--r--  1 root root  345 Jun 19 11:21 rc.yaml

drwxr-xr-x  2 root root 4096 Oct 25  2018 .ssh

-rw-r--r--  1 root root  187 Jun 19 11:31 svc.yaml

-rw-------  1 root root  896 Jun 19 11:31 .viminfo

$

$

$

$ vi svc.yaml

$

$

$ kubectl create -f svc.yaml

service/hello-svc created

$

$

$ kubectl get svc

NAME         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE

hello-svc    NodePort    10.108.150.167   <none>        8080:30712/TCP   6s

kubernetes   ClusterIP   10.96.0.1        <none>        443/TCP          52m

$

$

$ vi svc.yaml

$

$

$ kubectl apply -f svc.yaml

Warning: kubectl apply should be used on resource created by either kubectl create --save-config or kubectlapply

service/hello-svc configured

$

$

$ kubectl describe svc hello-svc

Name:                     hello-svc

Namespace:                default

Labels:                   app=hello-world

Annotations:              kubectl.kubernetes.io/last-applied-configuration={"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"app":"hello-world"},"name":"hello-svc","namespace":"default"},"spec":{"port...

Selector:                 app=hello-world

Type:                     NodePort

IP:                       10.108.150.167

Port:                     <unset>  8080/TCP

TargetPort:               8080/TCP

NodePort:                 <unset>  30001/TCP

Endpoints:                172.18.0.10:8080,172.18.0.11:8080,172.18.0.12:8080 + 7 more...

Session Affinity:         None

External Traffic Policy:  Cluster

Events:                   <none>

$

$

$ kubectl describe pods | grep app

Labels:         app=hello-world

Labels:         app=hello-world

Labels:         app=hello-world

Labels:         app=hello-world

Labels:         app=hello-world

Labels:         app=hello-world

Labels:         app=hello-world

Labels:         app=hello-world

Labels:         app=hello-world

Labels:         app=hello-world

$

$

$

$ kubectl get endpoint

error: the server doesn't have a resource type "endpoint"

$ kubectl describe pods | grep^C

$ kubectl get ep

NAME         ENDPOINTS                                                        AGE

hello-svc    172.18.0.10:8080,172.18.0.11:8080,172.18.0.12:8080 + 7 more...   6m

kubernetes   172.17.0.6:8443                                                  58m

$

$

$ kubectl get ep hello-svc

NAME        ENDPOINTS                                                        AGE

hello-svc   172.18.0.10:8080,172.18.0.11:8080,172.18.0.12:8080 + 7 more...   7m

$

$

$ kubectl describe  ep hello-svc

Name:         hello-svc

Namespace:    default

Labels:       app=hello-world

Annotations:  <none>

Subsets:

  Addresses:          172.18.0.10,172.18.0.11,172.18.0.12,172.18.0.13,172.18.0.4,172.18.0.5,172.18.0.6,172.18.0.7,172.18.0.8,172.18.0.9

  NotReadyAddresses:  <none>

  Ports:

    Name     Port  Protocol

    ----     ----  --------

    <unset>  8080  TCP

 

Events:  <none>

$

$

$ vi svc.yaml

$

$ kubectl create -f svc.yaml

error: error parsing svc.yaml: error converting YAML to JSON: yaml: line 2: mapping values are not allowed in this context

$

$

$ vi svc.yaml

$

$

$ kubectl create -f svc.yaml

error: error parsing svc.yaml: error converting YAML to JSON: yaml: line 12: could not find expected ':'

$

$

$ vi svc.yaml

$

$ kubectl create -f svc.yaml

error: error validating "svc.yaml": error validating data: [ValidationError(Service.spec.ports[0]): unknownfield "ports" in io.k8s.api.core.v1.ServicePort, ValidationError(Service.spec.ports[0]): missing required field "port" in io.k8s.api.core.v1.ServicePort]; if you choose to ignore these errors, turn validation off with --validate=false

$

$

$ vi svc.yaml

$

$

$ kubectl create -f svc.yaml

service/hello-svc created

$

$

$ kubectl get svc

NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE

hello-svc    NodePort    10.100.221.67   <none>        8080:30001/TCP   8s

kubernetes   ClusterIP   10.96.0.1       <none>        443/TCP          2m12s

$

$

$ kubectl get pods

No resources found.

$

$

$

$ kubectl describe svc hello-svc

Name:                     hello-svc

Namespace:                default

Labels:                   app=hello-world

Annotations:              <none>

Selector:                 app=hello-world

Type:                     NodePort

IP:                       10.100.221.67

Port:                     <unset>  8080/TCP

TargetPort:               8080/TCP

NodePort:                 <unset>  30001/TCP

Endpoints:                <none>

Session Affinity:         None

External Traffic Policy:  Cluster

Events:                   <none>

$

$

$ vi deploy.yaml

$

$

$ cat deploy.yaml

apiVersion: extensions/v1beta1

kind: Deployment

metadata:

  name: hello-deploy

spec:

  replicas: 10

  template:

    metadata:

      labels:

        app: hello-world

    spec:

      containers:

      - name: hello-world

        image: nigelpoulton/pluralsight-docker-ci:latest

        ports:

        - -containerPort: 8080

$

$ kubectl create -f deploy.yaml

error: error validating "deploy.yaml": error validating data: [ValidationError(Deployment.spec.template.spec.containers[0].ports[0]): unknown field "-containerPort" in io.k8s.api.core.v1.ContainerPort, ValidationError(Deployment.spec.template.spec.containers[0].ports[0]): missing required field "containerPort" in io.k8s.api.core.v1.ContainerPort]; if you choose to ignore these errors, turn validation off with --validate=false

$

$

$ vi deploy.yaml

$

$

$ cat deploy.yaml

apiVersion: extensions/v1beta1

kind: Deployment

metadata:

  name: hello-deploy

spec:

  replicas: 10

  template:

    metadata:

      labels:

        app: hello-world

    spec:

      containers:

      - name: hello-world

        image: nigelpoulton/pluralsight-docker-ci:latest

        ports:

        - containerPort: 8080

$

$

$ kubectl create -f deploy.yaml

deployment.extensions/hello-deploy created

$

$

$ kubectl get deploy

NAME           READY   UP-TO-DATE   AVAILABLE   AGE

hello-deploy   0/10    10           0           15s

$

$

$ kubectl describe deploy

Name:                   hello-deploy

Namespace:              default

CreationTimestamp:      Thu, 20 Jun 2019 09:49:12 +0000

Labels:                 app=hello-world

Annotations:            deployment.kubernetes.io/revision: 1

Selector:               app=hello-world

Replicas:               10 desired | 10 updated | 10 total | 0 available | 10 unavailable

StrategyType:           RollingUpdate

MinReadySeconds:        0

RollingUpdateStrategy:  1 max unavailable, 1 max surge

Pod Template:

  Labels:  app=hello-world

  Containers:

   hello-world:

    Image:        nigelpoulton/pluralsight-docker-ci:latest

    Port:         8080/TCP

    Host Port:    0/TCP

    Environment:  <none>

    Mounts:       <none>

  Volumes:        <none>

Conditions:

  Type           Status  Reason

  ----           ------  ------

  Available      False   MinimumReplicasUnavailable

OldReplicaSets:  <none>

NewReplicaSet:   hello-deploy-5d59684bcc (10/10 replicas created)

Events:

  Type    Reason             Age   From                   Message

  ----    ------             ----  ----                   -------

  Normal  ScalingReplicaSet  27s   deployment-controller  Scaled up replica set hello-deploy-5d59684bcc to 10

$

$

$

$ kubectl get deploy

NAME           READY   UP-TO-DATE   AVAILABLE   AGE

hello-deploy   10/10   10           10          52s

$

$

$ kubectl describe deploy

Name:                   hello-deploy

Namespace:              default

CreationTimestamp:      Thu, 20 Jun 2019 09:49:12 +0000

Labels:                 app=hello-world

Annotations:            deployment.kubernetes.io/revision: 1

Selector:               app=hello-world

Replicas:               10 desired | 10 updated | 10 total | 10 available | 0 unavailable

StrategyType:           RollingUpdate

MinReadySeconds:        0

RollingUpdateStrategy:  1 max unavailable, 1 max surge

Pod Template:

  Labels:  app=hello-world

  Containers:

   hello-world:

    Image:        nigelpoulton/pluralsight-docker-ci:latest

    Port:         8080/TCP

   Host Port:    0/TCP

    Environment:  <none>

    Mounts:       <none>

  Volumes:        <none>

Conditions:

  Type           Status  Reason

  ----           ------  ------

  Available      True    MinimumReplicasAvailable

OldReplicaSets:  <none>

NewReplicaSet:   hello-deploy-5d59684bcc (10/10 replicas created)

Events:

  Type    Reason             Age   From                   Message

  ----    ------             ----  ----                   -------

  Normal  ScalingReplicaSet  58s   deployment-controller  Scaled up replica set hello-deploy-5d59684bcc to 10

$

$

$

$

$ kubectl get rs

NAME                      DESIRED   CURRENT   READY   AGE

hello-deploy-5d59684bcc   10        10        10      2m7s

$

$

$ kubectl describe rs

Name:           hello-deploy-5d59684bcc

Namespace:      default

Selector:       app=hello-world,pod-template-hash=5d59684bcc

Labels:         app=hello-world

                pod-template-hash=5d59684bcc

Annotations:    deployment.kubernetes.io/desired-replicas: 10

                deployment.kubernetes.io/max-replicas: 11

                deployment.kubernetes.io/revision: 1

Controlled By:  Deployment/hello-deploy

Replicas:       10 current / 10 desired

Pods Status:    10 Running / 0 Waiting / 0 Succeeded / 0 Failed

Pod Template:

  Labels:  app=hello-world

           pod-template-hash=5d59684bcc

  Containers:

   hello-world:

    Image:        nigelpoulton/pluralsight-docker-ci:latest

    Port:         8080/TCP

    Host Port:    0/TCP

    Environment:  <none>

    Mounts:       <none>

  Volumes:        <none>

Events:

  Type    Reason            Age    From                   Message

  ----    ------            ----   ----                   -------

  Normal  SuccessfulCreate  2m23s  replicaset-controller  Created pod: hello-deploy-5d59684bcc-d5ks8

  Normal  SuccessfulCreate  2m23s  replicaset-controller  Created pod: hello-deploy-5d59684bcc-rg8zs

  Normal  SuccessfulCreate  2m23s  replicaset-controller  Created pod: hello-deploy-5d59684bcc-6tb4m

  Normal  SuccessfulCreate  2m22s  replicaset-controller  Created pod: hello-deploy-5d59684bcc-c2td7

  Normal  SuccessfulCreate  2m22s  replicaset-controller  Created pod: hello-deploy-5d59684bcc-8xkqx

  Normal  SuccessfulCreate  2m22s  replicaset-controller  Created pod: hello-deploy-5d59684bcc-k47gn

  Normal  SuccessfulCreate  2m22s  replicaset-controller  Created pod: hello-deploy-5d59684bcc-ksq4x

  Normal  SuccessfulCreate  2m22s  replicaset-controller  Created pod: hello-deploy-5d59684bcc-khszd

  Normal  SuccessfulCreate  2m22s  replicaset-controller  Created pod: hello-deploy-5d59684bcc-mgggb

  Normal  SuccessfulCreate  2m22s  replicaset-controller  (combined from similar events): Created pod: hello-deploy-5d59684bcc-9lmnb

$

$

$

$

$ vi deploy.yaml

$

$ cat deploy.yaml

apiVersion: extensions/v1beta1

kind: Deployment

metadata:

  name: hello-deploy

spec:

  replicas: 10

  template:

    metadata:

      labels:

        app: hello-world

    spec:

      containers:

      - name: hello-world

        image: nigelpoulton/pluralsight-docker-ci:edge

        ports:

        - containerPort: 8080

$

$

$ vi deploy.yaml

$ vi deploy.yaml

$ cat deploy.yaml

apiVersion: extensions/v1beta1

kind: Deployment

metadata:

  name: hello-deploy

spec:

  replicas: 10

  minReadySeconds: 10

  strategy:

    tyep: RollingUpdate

    rollingUpdate: 1

    maxSurge: 1

  template:

    metadata:

      labels:

        app: hello-world

    spec:

      containers:

      - name: hello-world

        image: nigelpoulton/pluralsight-docker-ci:edge

        ports:

        - containerPort: 8080

$

$

$ kubectl apply -f deploy.yaml

error: error validating "deploy.yaml": error validating data: [ValidationError(Deployment.spec.strategy): unknown field "maxSurge" in io.k8s.api.extensions.v1beta1.DeploymentStrategy, ValidationError(Deployment.spec.strategy.rollingUpdate): invalid type for io.k8s.api.extensions.v1beta1.RollingUpdateDeployment: got "number", expected "map", ValidationError(Deployment.spec.strategy): unknown field "tyep" in io.k8s.api.extensions.v1beta1.DeploymentStrategy]; if you choose to ignore these errors, turn validation off with --validate=false

$

$ vi deploy.yaml

$

$

$ cat deploy.yaml

apiVersion: extensions/v1beta1

kind: Deployment

metadata:

  name: hello-deploy

spec:

  replicas: 10

  minReadySeconds: 10

  strategy:

    type: RollingUpdate

    rollingUpdate: 1

    maxSurge: 1

  template:

    metadata:

      labels:

        app: hello-world

    spec:

      containers:

      - name: hello-world

        image: nigelpoulton/pluralsight-docker-ci:edge

        ports:

        - containerPort: 8080

$

$

$ kubectl apply -f deploy.yaml

error: error validating "deploy.yaml": error validating data: [ValidationError(Deployment.spec.strategy): unknown field "maxSurge" in io.k8s.api.extensions.v1beta1.DeploymentStrategy, ValidationError(Deployment.spec.strategy.rollingUpdate): invalid type for io.k8s.api.extensions.v1beta1.RollingUpdateDeployment: got "number", expected "map"]; if you choose to ignore these errors, turn validation off with --validate=false

$

$

$ vi deploy.yaml

$

$ kubectl apply -f deploy.yaml

Warning: kubectl apply should be used on resource created by either kubectl create --save-config or kubectlapply

deployment.extensions/hello-deploy configured

$

$

$ cat deploy.yaml

apiVersion: extensions/v1beta1

kind: Deployment

metadata:

  name: hello-deploy

spec:

  replicas: 10

  minReadySeconds: 10

  strategy:

    type: RollingUpdate

    rollingUpdate:

      maxUnavailable: 1

      maxSurge: 1

  template:

    metadata:

      labels:

        app: hello-world

    spec:

      containers:

      - name: hello-world

        image: nigelpoulton/pluralsight-docker-ci:edge

        ports:

        - containerPort: 8080

$

$

$ kubectl get deploy

NAME           READY   UP-TO-DATE   AVAILABLE   AGE

hello-deploy   9/10    2            9           14m

$

$

$ kubectl describe deploy hello-deploy

Name:                   hello-deploy

Namespace:              default

CreationTimestamp:      Thu, 20 Jun 2019 09:49:12 +0000

Labels:                 app=hello-world

Annotations:            deployment.kubernetes.io/revision: 2

                        kubectl.kubernetes.io/last-applied-configuration:

                          {"apiVersion":"extensions/v1beta1","kind":"Deployment","metadata":{"annotations":{},"name":"hello-deploy","namespace":"default"},"spec":{"...

Selector:               app=hello-world

Replicas:               10 desired | 4 updated | 11 total | 9 available | 2 unavailable

StrategyType:           RollingUpdate

MinReadySeconds:        10

RollingUpdateStrategy:  1 max unavailable, 1 max surge

Pod Template:

  Labels:  app=hello-world

  Containers:

   hello-world:

    Image:        nigelpoulton/pluralsight-docker-ci:edge

    Port:         8080/TCP

    Host Port:    0/TCP

    Environment:  <none>

    Mounts:       <none>

  Volumes:        <none>

Conditions:

  Type           Status  Reason

  ----           ------  ------

  Available      True    MinimumReplicasAvailable

OldReplicaSets:  hello-deploy-5d59684bcc (7/7 replicas created)

NewReplicaSet:   hello-deploy-865795ccdc (4/4 replicas created)

Events:

  Type    Reason             Age   From                   Message

  ----    ------             ----  ----                   -------

  Normal  ScalingReplicaSet  15m   deployment-controller  Scaled up replica set hello-deploy-5d59684bcc to 10

  Normal  ScalingReplicaSet  46s   deployment-controller  Scaled up replica set hello-deploy-865795ccdc to 1

  Normal  ScalingReplicaSet  46s   deployment-controller  Scaled down replica set hello-deploy-5d59684bcc to 9

  Normal  ScalingReplicaSet  46s   deployment-controller  Scaled up replica set hello-deploy-865795ccdc to 2

  Normal  ScalingReplicaSet  11s   deployment-controller  Scaled down replica set hello-deploy-5d59684bcc to 7

  Normal  ScalingReplicaSet  11s   deployment-controller  Scaled up replica set hello-deploy-865795ccdc to 4

$

$

$

$ kubectl get rs

NAME                      DESIRED   CURRENT   READY   AGE

hello-deploy-5d59684bcc   3         3         3       15m

hello-deploy-865795ccdc   8         8         8       68s

$

$

$ kubectl describe hello-deploy-5d59684bcc

error: the server doesn't have a resource type "hello-deploy-5d59684bcc"

$ kubectl describe rs hello-deploy-5d59684bcc

Name:           hello-deploy-5d59684bcc

Namespace:      default

Selector:       app=hello-world,pod-template-hash=5d59684bcc

Labels:         app=hello-world

                pod-template-hash=5d59684bcc

Annotations:    deployment.kubernetes.io/desired-replicas: 10

                deployment.kubernetes.io/max-replicas: 11

                deployment.kubernetes.io/revision: 1

Controlled By:  Deployment/hello-deploy

Replicas:       0 current / 0 desired

Pods Status:    5 Running / 0 Waiting / 0 Succeeded / 0 Failed

Pod Template:

  Labels:  app=hello-world

           pod-template-hash=5d59684bcc

  Containers:

   hello-world:

    Image:        nigelpoulton/pluralsight-docker-ci:latest

    Port:         8080/TCP

    Host Port:    0/TCP

    Environment:  <none>

    Mounts:       <none>

  Volumes:        <none>

Events:

  Type    Reason            Age   From                   Message

  ----    ------            ----  ----                   -------

  Normal  SuccessfulCreate  15m   replicaset-controller  Created pod: hello-deploy-5d59684bcc-d5ks8

  Normal  SuccessfulCreate  15m   replicaset-controller  Created pod: hello-deploy-5d59684bcc-rg8zs

  Normal  SuccessfulCreate  15m   replicaset-controller  Created pod: hello-deploy-5d59684bcc-6tb4m

  Normal  SuccessfulCreate  15m   replicaset-controller  Created pod: hello-deploy-5d59684bcc-c2td7

  Normal  SuccessfulCreate  15m   replicaset-controller  Created pod: hello-deploy-5d59684bcc-8xkqx

  Normal  SuccessfulCreate  15m   replicaset-controller  Created pod: hello-deploy-5d59684bcc-k47gn

  Normal  SuccessfulCreate  15m   replicaset-controller  Created pod: hello-deploy-5d59684bcc-ksq4x

  Normal  SuccessfulCreate  15m   replicaset-controller  Created pod: hello-deploy-5d59684bcc-khszd

  Normal  SuccessfulCreate  15m   replicaset-controller  Created pod: hello-deploy-5d59684bcc-mgggb

  Normal  SuccessfulCreate  15m   replicaset-controller  (combined from similar events): Created pod: hello-deploy-5d59684bcc-9lmnb

  Normal  SuccessfulDelete  96s   replicaset-controller  Deleted pod: hello-deploy-5d59684bcc-9lmnb

  Normal  SuccessfulDelete  61s   replicaset-controller  Deleted pod: hello-deploy-5d59684bcc-ksq4x

  Normal  SuccessfulDelete  61s   replicaset-controller  Deleted pod: hello-deploy-5d59684bcc-khszd

  Normal  SuccessfulDelete  47s   replicaset-controller  Deleted pod: hello-deploy-5d59684bcc-mgggb

  Normal  SuccessfulDelete  47s   replicaset-controller  Deleted pod: hello-deploy-5d59684bcc-k47gn

  Normal  SuccessfulDelete  32s   replicaset-controller  Deleted pod: hello-deploy-5d59684bcc-rg8zs

  Normal  SuccessfulDelete  32s   replicaset-controller  Deleted pod: hello-deploy-5d59684bcc-6tb4m

  Normal  SuccessfulDelete  18s   replicaset-controller  Deleted pod: hello-deploy-5d59684bcc-8xkqx

  Normal  SuccessfulDelete  18s   replicaset-controller  Deleted pod: hello-deploy-5d59684bcc-c2td7

  Normal  SuccessfulDelete  4s    replicaset-controller  (combined from similar events): Deleted pod: hello-deploy-5d59684bcc-d5ks8

$

$

$

$

$ kubectl apply -f deploy.yaml --record

deployment.extensions/hello-deploy configured

$

$

$

$ kubectl rollout status deployment hello-deploy

deployment "hello-deploy" successfully rolled out

$

$

$ kubectl get deploy hello-deploy

NAME           READY   UP-TO-DATE   AVAILABLE   AGE

hello-deploy   10/10   10           10          17m

$

$

$ kubectl rollout history  deployment hello-deploy

deployment.extensions/hello-deploy

REVISION  CHANGE-CAUSE

1         <none>

2         kubectl apply --filename=deploy.yaml --record=true

 

$ kubectl get rs

NAME                      DESIRED   CURRENT   READY   AGE

hello-deploy-5d59684bcc   0         0         0       20m

hello-deploy-865795ccdc   10        10        10      6m26s

$

$

$

$ kubectl describe deploy hello-deploy

Name:                   hello-deploy

Namespace:              default

CreationTimestamp:      Thu, 20 Jun 2019 09:49:12 +0000

Labels:                 app=hello-world

Annotations:            deployment.kubernetes.io/revision: 2

                        kubectl.kubernetes.io/last-applied-configuration:

                          {"apiVersion":"extensions/v1beta1","kind":"Deployment","metadata":{"annotations":{"kubernetes.io/change-cause":"kubectl apply --filename=d...

                        kubernetes.io/change-cause: kubectl apply --filename=deploy.yaml --record=true

Selector:               app=hello-world

Replicas:               10 desired | 10 updated | 10 total | 10 available | 0 unavailable

StrategyType:           RollingUpdate

MinReadySeconds:        10

RollingUpdateStrategy:  1 max unavailable, 1 max surge

Pod Template:

  Labels:  app=hello-world

  Containers:

   hello-world:

    Image:        nigelpoulton/pluralsight-docker-ci:edge

    Port:         8080/TCP

    Host Port:    0/TCP

    Environment:  <none>

    Mounts:       <none>

  Volumes:        <none>

Conditions:

  Type           Status  Reason

  ----           ------  ------

  Available      True    MinimumReplicasAvailable

OldReplicaSets:  <none>

NewReplicaSet:   hello-deploy-865795ccdc (10/10 replicas created)

Events:

  Type    Reason             Age                   From                   Message

  ----    ------             ----                  ----                   -------

  Normal  ScalingReplicaSet  21m                   deployment-controller  Scaled up replica set hello-deploy-5d59684bcc to 10

  Normal  ScalingReplicaSet  7m21s                 deployment-controller  Scaled up replica set hello-deploy-865795ccdc to 1

  Normal  ScalingReplicaSet  7m21s                 deployment-controller  Scaled down replica set hello-deploy-5d59684bcc to 9

  Normal  ScalingReplicaSet  7m21s                 deployment-controller  Scaled up replica set hello-deploy-865795ccdc to 2

  Normal  ScalingReplicaSet  6m46s                 deployment-controller  Scaled down replica set hello-deploy-5d59684bcc to 7

  Normal  ScalingReplicaSet  6m46s                 deployment-controller  Scaled up replica set hello-deploy-865795ccdc to 4

  Normal  ScalingReplicaSet  6m32s                 deployment-controller  Scaled down replica set hello-deploy-5d59684bcc to 5

  Normal  ScalingReplicaSet  6m32s                 deployment-controller  Scaled up replica set hello-deploy-865795ccdc to 6

  Normal  ScalingReplicaSet  6m18s                 deployment-controller  Scaled down replica set hello-deploy-5d59684bcc to 3

  Normal  ScalingReplicaSet  6m17s                 deployment-controller  Scaled up replica set hello-deploy-865795ccdc to 8

  Normal  ScalingReplicaSet  5m49s (x3 over 6m3s)  deployment-controller  (combined from similar events): Scaled down replica set hello-deploy-5d59684bcc to 0

$

$

$ kubectl rollout undo deployment hello-deploy --to-revision=1

deployment.extensions/hello-deploy rolled back

$

$

$ kubectl get deploy hello-deploy

NAME           READY   UP-TO-DATE   AVAILABLE   AGE

hello-deploy   11/10   6            9           23m

$

$

$ kubectl rollout status deplomenty hello-deploy

error: the server doesn't have a resource type "deplomenty"

$ kubectl rollout status deplyomeny hello-deploy

error: the server doesn't have a resource type "deplyomeny"

$ kubectl rollout status deploymeny hello-deploy

error: the server doesn't have a resource type "deploymeny"

$ kubectl rollout status deployment hello-deploy

deployment "hello-deploy" successfully rolled out

$

$

$

$

$